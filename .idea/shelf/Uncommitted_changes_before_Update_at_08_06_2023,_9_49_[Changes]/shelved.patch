Index: temp.ipynb
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>{\n \"cells\": [\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 57,\n   \"metadata\": {\n    \"collapsed\": true,\n    \"pycharm\": {\n     \"name\": \"#%%\\n\"\n    }\n   },\n   \"outputs\": [],\n   \"source\": [\n    \"import typing\\n\",\n    \"\\n\",\n    \"import numpy as np\\n\",\n    \"import pandas as pd\\n\",\n    \"import plotly.express as px\\n\",\n    \"import plotly.io as pio\\n\",\n    \"from sklearn.model_selection import train_test_split\\n\",\n    \"\\n\",\n    \"# _features = {\\\"hotel_star_rating\\\": (0, 5),\\n\",\n    \"#              \\\"no_of_adults\\\": (1, 19),\\n\",\n    \"#              \\\"no_of_children\\\": (0, 8),\\n\",\n    \"#              \\\"no_of_extra_bed\\\": (0, 4),\\n\",\n    \"#              \\\"no_of_room\\\": (1, 9),\\n\",\n    \"#              \\\"waterfront\\\": (0, 1),\\n\",\n    \"#              \\\"view\\\": (0, 4),\\n\",\n    \"#              \\\"condition\\\": (1, 5),\\n\",\n    \"#              \\\"grade\\\": (1, 13),\\n\",\n    \"#              \\\"sqft_above\\\": (250, 10000),\\n\",\n    \"#              _sqft_basement_label: (0, 5000),\\n\",\n    \"#              \\\"yr_built\\\": (1900, 2015),\\n\",\n    \"#              _yr_renovated_label: (0, 2015),\\n\",\n    \"#              \\\"zipcode\\\": (98000, 99000),\\n\",\n    \"#              \\\"lat\\\": (47, 48),\\n\",\n    \"#              \\\"long\\\": (-123, -121)}\\n\",\n    \"\\n\",\n    \"_dates = [\\\"booking_datetime\\\", \\\"checkin_date\\\", \\\"checkout_date\\\", \\\"hotel_live_date\\\", \\\"cancellation_datetime\\\"]\\n\",\n    \"_irrelevant_features = [\\\"h_booking_id\\\", \\\"hotel_chain_code\\\", \\\"hotel_brand_code\\\", \\\"request_earlycheckin\\\",\\n\",\n    \"                        \\\"request_airport\\\", \\\"request_twinbeds\\\", \\\"request_largebed\\\", \\\"request_highfloor\\\",\\n\",\n    \"                        \\\"request_latecheckin\\\", \\\"request_nonesmoke\\\"]\\n\",\n    \"_categorial_features = [\\\"hotel_country_code\\\", \\\"accommadation_type_name\\\", \\\"charge_option\\\",\\n\",\n    \"                        \\\"customer_nationality\\\", \\\"guest_nationality_country_name\\\", \\\"origin_country_code\\\",\\n\",\n    \"                        \\\"original_payment_method\\\", \\\"original_payment_type\\\", \\\"original_payment_currency\\\",\\n\",\n    \"                        \\\"hotel_area_code\\\", \\\"is_first_booking\\\", \\\"is_user_logged_in\\\"]  #\\\"cancellation_policy_code\\\",\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 56,\n   \"outputs\": [],\n   \"source\": [\n    \"def split_data(X: pd.DataFrame):\\n\",\n    \"    # Splitting the DataFrame into three parts: train, validation, and test\\n\",\n    \"    train_df, temp_df = train_test_split(X, test_size=0.4, random_state=42)\\n\",\n    \"    validation_df, test_df = train_test_split(temp_df, test_size=0.5, random_state=42)\\n\",\n    \"\\n\",\n    \"    # Printing the sizes of the resulting DataFrames\\n\",\n    \"    print(\\\"Train set size:\\\", len(train_df))\\n\",\n    \"    print(\\\"Validation set size:\\\", len(validation_df))\\n\",\n    \"    print(\\\"Test set size:\\\", len(test_df))\\n\",\n    \"    return train_df, test_df, validation_df\"\n   ],\n   \"metadata\": {\n    \"collapsed\": false,\n    \"pycharm\": {\n     \"name\": \"#%%\\n\"\n    }\n   }\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"outputs\": [],\n   \"source\": [\n    \"def _fill_missings_values(X: pd.DataFrame):\\n\",\n    \"    \\\"\\\"\\\"\\n\",\n    \"    fills missings values by prediction Parameters\\n\",\n    \"    ----------\\n\",\n    \"    X : DataFrame of shape (n_samples, n_features)\\n\",\n    \"        Design matrix of regression problem\\n\",\n    \"    \\\"\\\"\\\"\\n\",\n    \"\\n\",\n    \"    model = LinearRegression(include_intercept=True)\\n\",\n    \"    for label in X.columns:\\n\",\n    \"        label_X = X.dropna(subset=X.columns.difference([label]))\\n\",\n    \"        data_to_pred = label_X[label_X[label].isnull()]\\n\",\n    \"        if data_to_pred.empty:\\n\",\n    \"            continue\\n\",\n    \"\\n\",\n    \"        X_not_null = label_X[label_X[label].notna()]\\n\",\n    \"        y_pred_train = X_not_null[label]\\n\",\n    \"        X_pred_train = X_not_null.drop(label, axis=1)\\n\",\n    \"        X_pred_test = data_to_pred.drop(label, axis=1)\\n\",\n    \"        model.fit(X_pred_train, y_pred_train)\\n\",\n    \"\\n\",\n    \"        predicted_vals = model.predict(X_pred_test).round(decimals=2)\\n\",\n    \"        X[label].update(pd.Series(predicted_vals, index=X_pred_test.index))\"\n   ],\n   \"metadata\": {\n    \"collapsed\": false,\n    \"pycharm\": {\n     \"name\": \"#%%\\n\"\n    }\n   }\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 15,\n   \"outputs\": [],\n   \"source\": [\n    \"def load_data(filename: str) -> pd.DataFrame:\\n\",\n    \"    \\\"\\\"\\\"\\n\",\n    \"    Load city daily temperature dataset and preprocess data.\\n\",\n    \"    Parameters\\n\",\n    \"    ----------\\n\",\n    \"    filename: str\\n\",\n    \"        Path to house prices dataset\\n\",\n    \"\\n\",\n    \"    Returns\\n\",\n    \"    -------\\n\",\n    \"    Design matrix and response vector (Temp)\\n\",\n    \"    \\\"\\\"\\\"\\n\",\n    \"\\n\",\n    \"    df = pd.read_csv(filename, parse_dates=_dates)\\n\",\n    \"\\n\",\n    \"    return df\"\n   ],\n   \"metadata\": {\n    \"collapsed\": false,\n    \"pycharm\": {\n     \"name\": \"#%%\\n\"\n    }\n   }\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 42,\n   \"outputs\": [],\n   \"source\": [\n    \"def add_extra_features(X: pd.DataFrame):\\n\",\n    \"    X['order_canceled'] = np.where(df['cancellation_datetime'] != np.nan, 1, 0)\\n\",\n    \"    X['duration_days'] = (X['checkin_date'] - X['checkout_date']).dt.days\\n\",\n    \"    X['booked_days_before'] = (X['booking_datetime'] - X['checkin_date']).dt.days\\n\",\n    \"    X['cencel_code_day_one'] = df.apply(lambda row: parse_code_day_one(row['cancellation_policy_code']), axis=1)\\n\",\n    \"    X['cencel_code_return_one'] = df.apply(lambda row: parse_code_return_one(row['cancellation_policy_code']), axis=1)\\n\",\n    \"    X['cencel_code_day_two'] = df.apply(lambda row: parse_code_day_two(row['cancellation_policy_code']), axis=1)\\n\",\n    \"    X['cencel_code_return_two'] = df.apply(lambda row: parse_code_return_two(row['cancellation_policy_code']), axis=1)\\n\",\n    \"    X['parse_code_no_show'] = df.apply(lambda row: parse_code_no_show(row['cancellation_policy_code']), axis=1)\\n\",\n    \"\\n\"\n   ],\n   \"metadata\": {\n    \"collapsed\": false,\n    \"pycharm\": {\n     \"name\": \"#%%\\n\"\n    }\n   }\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 48,\n   \"outputs\": [],\n   \"source\": [\n    \"import re\\n\",\n    \"\\n\",\n    \"\\n\",\n    \"def preprocess_remove_columns_add_dummy(X: pd.DataFrame):\\n\",\n    \"    for feat in _irrelevant_features:\\n\",\n    \"        X = X.drop(feat, axis=1)\\n\",\n    \"    X = pd.get_dummies(df, prefix=_categorial_features, columns=_categorial_features)\\n\",\n    \"    return X\\n\",\n    \"\\n\",\n    \"\\n\",\n    \"def parse_code_day_one(row):\\n\",\n    \"    numeric_values = re.findall(r'\\\\d+', row)\\n\",\n    \"    alphabetic_substrings = re.findall(r'[a-zA-Z]+', row)\\n\",\n    \"    try:\\n\",\n    \"        if alphabetic_substrings[0] == 'D':\\n\",\n    \"            return float(numeric_values[0])\\n\",\n    \"    except:\\n\",\n    \"        return 0\\n\",\n    \"    return 0\\n\",\n    \"\\n\",\n    \"\\n\",\n    \"def parse_code_return_one(row):\\n\",\n    \"    numeric_values = re.findall(r'\\\\d+', row)\\n\",\n    \"    alphabetic_substrings = re.findall(r'[a-zA-Z]+', row)\\n\",\n    \"    try:\\n\",\n    \"        if alphabetic_substrings[1] == 'P':\\n\",\n    \"            return float(numeric_values[1]) / 100\\n\",\n    \"        elif alphabetic_substrings[1] == 'N':\\n\",\n    \"            return -1 * float(numeric_values[1])\\n\",\n    \"        else:\\n\",\n    \"            return 0\\n\",\n    \"    except:\\n\",\n    \"        return 0\\n\",\n    \"\\n\",\n    \"\\n\",\n    \"def parse_code_day_two(row):\\n\",\n    \"    numeric_values = re.findall(r'\\\\d+', row)\\n\",\n    \"    alphabetic_substrings = re.findall(r'[a-zA-Z]+', row)\\n\",\n    \"    try:\\n\",\n    \"        if alphabetic_substrings[2] == 'D':\\n\",\n    \"            return float(numeric_values[2])\\n\",\n    \"    except:\\n\",\n    \"        return 0\\n\",\n    \"    return 0\\n\",\n    \"\\n\",\n    \"\\n\",\n    \"def parse_code_return_two(row):\\n\",\n    \"    numeric_values = re.findall(r'\\\\d+', row)\\n\",\n    \"    alphabetic_substrings = re.findall(r'[a-zA-Z]+', row)\\n\",\n    \"    try:\\n\",\n    \"        if alphabetic_substrings[3] == 'P':\\n\",\n    \"            return float(numeric_values[1]) / 100\\n\",\n    \"        elif alphabetic_substrings[3] == 'N':\\n\",\n    \"            return -1 * float(numeric_values[1])\\n\",\n    \"        else:\\n\",\n    \"            return 0\\n\",\n    \"    except:\\n\",\n    \"        return 0\\n\",\n    \"\\n\",\n    \"\\n\",\n    \"def parse_code_no_show(row):\\n\",\n    \"    numeric_values = re.findall(r'\\\\d+', row)\\n\",\n    \"    alphabetic_substrings = re.findall(r'[a-zA-Z]+', row)\\n\",\n    \"    try:\\n\",\n    \"        if len(alphabetic_substrings) % 2 != 0:\\n\",\n    \"            if alphabetic_substrings[-1] == 'P':\\n\",\n    \"                return float(numeric_values[-1]) / 100\\n\",\n    \"            if alphabetic_substrings[-1] == 'N':\\n\",\n    \"                return -1 * float(numeric_values[1])\\n\",\n    \"        return 0\\n\",\n    \"    except:\\n\",\n    \"        return 0\\n\",\n    \"\\n\",\n    \"\\n\",\n    \"\\n\",\n    \"\\n\",\n    \"\\n\"\n   ],\n   \"metadata\": {\n    \"collapsed\": false,\n    \"pycharm\": {\n     \"name\": \"#%%\\n\"\n    }\n   }\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"outputs\": [],\n   \"source\": [\n    \"def proccess_dates(df: pd.DataFrame):\\n\",\n    \"    for label in _dates:\\n\",\n    \"        df[f\\\"{label}_dayofyear\\\"] = df[label].dt.dayofyear\\n\",\n    \"        df[f\\\"{label}_year\\\"] = df[label].dt.year\"\n   ],\n   \"metadata\": {\n    \"collapsed\": false,\n    \"pycharm\": {\n     \"name\": \"#%%\\n\"\n    }\n   }\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"outputs\": [],\n   \"source\": [\n    \"def preprocess_data(X: pd.DataFrame, y: typing.Optional[pd.Series] = None):\\n\",\n    \"    \\\"\\\"\\\"\\n\",\n    \"    preprocess data\\n\",\n    \"    Parameters\\n\",\n    \"    ----------\\n\",\n    \"    X : DataFrame of shape (n_samples, n_features)\\n\",\n    \"        Design matrix of regression problem\\n\",\n    \"\\n\",\n    \"    y : array-like of shape (n_samples, )\\n\",\n    \"        Response vector corresponding given samples\\n\",\n    \"\\n\",\n    \"    Returns\\n\",\n    \"    -------\\n\",\n    \"    Post-processed design matrix and response vector (prices) - either as a single\\n\",\n    \"    DataFrame or a Tuple[DataFrame, Series]\\n\",\n    \"    \\\"\\\"\\\"\\n\",\n    \"\\n\",\n    \"    is_train = y is not None\\n\",\n    \"    if is_train:\\n\",\n    \"        X = X.assign(order_canceled=y)\\n\",\n    \"        X = X.drop_duplicates()\\n\",\n    \"\\n\",\n    \"\\n\",\n    \"X = X.drop(_irrelevant_features, axis=1)  # Irrelevant features\\n\",\n    \"\\n\",\n    \"proccess_dates(X)\\n\",\n    \"X = X.drop(_dates, axis=1)  # Irrelevant features\\n\",\n    \"\\n\",\n    \"for label in X:  # Replaces invalid values with temporary nan value\\n\",\n    \"    X[label] = X[label].mask(~X[label].between(X[label][0], X[label][1], inclusive=\\\"both\\\"), np.nan)\\n\",\n    \"\\n\",\n    \"for category in _categorial_features:  # Handles categorial features\\n\",\n    \"    X[category] = X[category].astype('category')\\n\",\n    \"    X = pd.get_dummies(X, prefix=category, columns=[category])\\n\",\n    \"\\n\",\n    \"add_extra_features(X)\\n\",\n    \"\\n\",\n    \"_fill_missings_values(X)\\n\",\n    \"if not is_train:\\n\",\n    \"    return X\\n\",\n    \"\\n\",\n    \"X = X.reset_index(drop=True)\\n\",\n    \"post_processed_y = X[\\\"y_train\\\"]\\n\",\n    \"return X.drop(\\\"y_train\\\", axis=1), post_processed_y\\n\",\n    \"\\n\"\n   ],\n   \"metadata\": {\n    \"collapsed\": false,\n    \"pycharm\": {\n     \"name\": \"#%%\\n\"\n    }\n   }\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 58,\n   \"outputs\": [],\n   \"source\": [\n    \"#read data\\n\",\n    \"# Specify the file path\\n\",\n    \"file_path = './data_files/agoda_cancellation_train.csv'\\n\",\n    \"# Read the CSV file into a DataFrame\\n\",\n    \"df = load_data(file_path)\"\n   ],\n   \"metadata\": {\n    \"collapsed\": false,\n    \"pycharm\": {\n     \"name\": \"#%%\\n\"\n    }\n   }\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 59,\n   \"outputs\": [\n    {\n     \"name\": \"stdout\",\n     \"output_type\": \"stream\",\n     \"text\": [\n      \"          h_booking_id    booking_datetime checkin_date checkout_date  \\\\\\n\",\n      \"0 -9223194055642672935 2018-06-28 21:15:00   2018-07-09    2018-07-13   \\n\",\n      \"1 -9222713784330706132 2018-08-10 22:31:00   2018-08-16    2018-08-17   \\n\",\n      \"2 -9222411208325704942 2018-09-14 07:55:00   2018-09-14    2018-09-15   \\n\",\n      \"3 -9222220845872895471 2018-06-25 07:33:00   2018-07-02    2018-07-03   \\n\",\n      \"4 -9221127186162682116 2018-07-23 10:06:00   2018-08-09    2018-08-10   \\n\",\n      \"\\n\",\n      \"   hotel_id hotel_country_code     hotel_live_date  hotel_star_rating  \\\\\\n\",\n      \"0      6452                 HK 2009-06-28 02:02:00                4.0   \\n\",\n      \"1     47729                 CN 2011-06-07 11:52:00                4.0   \\n\",\n      \"2    780431                 KR 2014-11-20 15:43:00                4.0   \\n\",\n      \"3    291365                 JP 2011-11-21 12:27:00                3.0   \\n\",\n      \"4    479046                 TH 2013-06-06 10:04:00                3.0   \\n\",\n      \"\\n\",\n      \"  accommadation_type_name charge_option  ...  request_highfloor  \\\\\\n\",\n      \"0                   Hotel       Pay Now  ...                NaN   \\n\",\n      \"1                   Hotel     Pay Later  ...                0.0   \\n\",\n      \"2                   Hotel       Pay Now  ...                0.0   \\n\",\n      \"3                   Hotel     Pay Later  ...                0.0   \\n\",\n      \"4                  Resort     Pay Later  ...                0.0   \\n\",\n      \"\\n\",\n      \"  request_largebed  request_twinbeds request_airport  request_earlycheckin  \\\\\\n\",\n      \"0              NaN               NaN             NaN                   NaN   \\n\",\n      \"1              0.0               1.0             0.0                   0.0   \\n\",\n      \"2              0.0               0.0             0.0                   0.0   \\n\",\n      \"3              1.0               0.0             0.0                   0.0   \\n\",\n      \"4              1.0               0.0             0.0                   0.0   \\n\",\n      \"\\n\",\n      \"   cancellation_datetime  hotel_area_code  hotel_brand_code hotel_chain_code  \\\\\\n\",\n      \"0                    NaT             1192               NaN              NaN   \\n\",\n      \"1                    NaT             5617             902.0            600.0   \\n\",\n      \"2                    NaT             3819               NaN              NaN   \\n\",\n      \"3                    NaT             2379             466.0            236.0   \\n\",\n      \"4             2018-07-23             1506               NaN              NaN   \\n\",\n      \"\\n\",\n      \"  hotel_city_code  \\n\",\n      \"0             142  \\n\",\n      \"1            1273  \\n\",\n      \"2            2799  \\n\",\n      \"3            1448  \\n\",\n      \"4             616  \\n\",\n      \"\\n\",\n      \"[5 rows x 39 columns]\\n\",\n      \"<bound method DataFrame.info of               h_booking_id    booking_datetime checkin_date checkout_date  \\\\\\n\",\n      \"0     -9223194055642672935 2018-06-28 21:15:00   2018-07-09    2018-07-13   \\n\",\n      \"1     -9222713784330706132 2018-08-10 22:31:00   2018-08-16    2018-08-17   \\n\",\n      \"2     -9222411208325704942 2018-09-14 07:55:00   2018-09-14    2018-09-15   \\n\",\n      \"3     -9222220845872895471 2018-06-25 07:33:00   2018-07-02    2018-07-03   \\n\",\n      \"4     -9221127186162682116 2018-07-23 10:06:00   2018-08-09    2018-08-10   \\n\",\n      \"...                    ...                 ...          ...           ...   \\n\",\n      \"58654  9221958224902563533 2018-07-18 22:07:00   2018-08-04    2018-08-05   \\n\",\n      \"58655  9222015611933681753 2018-09-05 12:07:00   2018-09-06    2018-09-08   \\n\",\n      \"58656  9222651806661094957 2018-06-08 23:23:00   2018-08-09    2018-08-11   \\n\",\n      \"58657  9223221736086584899 2018-09-02 08:18:00   2018-09-10    2018-09-12   \\n\",\n      \"58658  9223338323510018406 2018-07-07 10:46:00   2018-07-12    2018-07-14   \\n\",\n      \"\\n\",\n      \"       hotel_id hotel_country_code     hotel_live_date  hotel_star_rating  \\\\\\n\",\n      \"0          6452                 HK 2009-06-28 02:02:00                4.0   \\n\",\n      \"1         47729                 CN 2011-06-07 11:52:00                4.0   \\n\",\n      \"2        780431                 KR 2014-11-20 15:43:00                4.0   \\n\",\n      \"3        291365                 JP 2011-11-21 12:27:00                3.0   \\n\",\n      \"4        479046                 TH 2013-06-06 10:04:00                3.0   \\n\",\n      \"...         ...                ...                 ...                ...   \\n\",\n      \"58654   2975682                 ID 2017-10-12 11:01:00                2.0   \\n\",\n      \"58655   3579174                 PH 2017-11-30 00:42:00                4.0   \\n\",\n      \"58656    407156                 TH 2015-03-14 05:18:00                5.0   \\n\",\n      \"58657    303186                 DE 2012-04-13 17:48:00                0.0   \\n\",\n      \"58658   2227632                 HK 2017-06-19 10:06:00                4.0   \\n\",\n      \"\\n\",\n      \"             accommadation_type_name charge_option  ...  request_highfloor  \\\\\\n\",\n      \"0                              Hotel       Pay Now  ...                NaN   \\n\",\n      \"1                              Hotel     Pay Later  ...                0.0   \\n\",\n      \"2                              Hotel       Pay Now  ...                0.0   \\n\",\n      \"3                              Hotel     Pay Later  ...                0.0   \\n\",\n      \"4                             Resort     Pay Later  ...                0.0   \\n\",\n      \"...                              ...           ...  ...                ...   \\n\",\n      \"58654  Guest House / Bed & Breakfast       Pay Now  ...                0.0   \\n\",\n      \"58655                      Apartment       Pay Now  ...                0.0   \\n\",\n      \"58656                          Hotel       Pay Now  ...                NaN   \\n\",\n      \"58657                         Hostel       Pay Now  ...                0.0   \\n\",\n      \"58658                          Hotel       Pay Now  ...                NaN   \\n\",\n      \"\\n\",\n      \"      request_largebed  request_twinbeds request_airport  \\\\\\n\",\n      \"0                  NaN               NaN             NaN   \\n\",\n      \"1                  0.0               1.0             0.0   \\n\",\n      \"2                  0.0               0.0             0.0   \\n\",\n      \"3                  1.0               0.0             0.0   \\n\",\n      \"4                  1.0               0.0             0.0   \\n\",\n      \"...                ...               ...             ...   \\n\",\n      \"58654              1.0               0.0             0.0   \\n\",\n      \"58655              0.0               0.0             0.0   \\n\",\n      \"58656              NaN               NaN             NaN   \\n\",\n      \"58657              0.0               1.0             0.0   \\n\",\n      \"58658              NaN               NaN             NaN   \\n\",\n      \"\\n\",\n      \"       request_earlycheckin  cancellation_datetime  hotel_area_code  \\\\\\n\",\n      \"0                       NaN                    NaT             1192   \\n\",\n      \"1                       0.0                    NaT             5617   \\n\",\n      \"2                       0.0                    NaT             3819   \\n\",\n      \"3                       0.0                    NaT             2379   \\n\",\n      \"4                       0.0             2018-07-23             1506   \\n\",\n      \"...                     ...                    ...              ...   \\n\",\n      \"58654                   0.0             2018-07-22              995   \\n\",\n      \"58655                   0.0                    NaT              674   \\n\",\n      \"58656                   NaN                    NaT             3823   \\n\",\n      \"58657                   0.0                    NaT             4663   \\n\",\n      \"58658                   NaN                    NaT             3023   \\n\",\n      \"\\n\",\n      \"       hotel_brand_code hotel_chain_code hotel_city_code  \\n\",\n      \"0                   NaN              NaN             142  \\n\",\n      \"1                 902.0            600.0            1273  \\n\",\n      \"2                   NaN              NaN            2799  \\n\",\n      \"3                 466.0            236.0            1448  \\n\",\n      \"4                   NaN              NaN             616  \\n\",\n      \"...                 ...              ...             ...  \\n\",\n      \"58654               NaN              NaN            2066  \\n\",\n      \"58655               NaN              NaN            2310  \\n\",\n      \"58656             754.0             55.0            2477  \\n\",\n      \"58657               NaN              NaN            1935  \\n\",\n      \"58658             477.0            638.0             142  \\n\",\n      \"\\n\",\n      \"[58659 rows x 39 columns]>\\n\"\n     ]\n    }\n   ],\n   \"source\": [\n    \"# Print the DataFrame\\n\",\n    \"print(df.head())\\n\",\n    \"print(df.info)\"\n   ],\n   \"metadata\": {\n    \"collapsed\": false,\n    \"pycharm\": {\n     \"name\": \"#%%\\n\"\n    }\n   }\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 61,\n   \"outputs\": [\n    {\n     \"ename\": \"KeyError\",\n     \"evalue\": \"\\\"None of [Index(['hotel_country_code', 'accommadation_type_name', 'charge_option',\\\\n       'customer_nationality', 'guest_nationality_country_name',\\\\n       'origin_country_code', 'original_payment_method',\\\\n       'original_payment_type', 'original_payment_currency', 'hotel_area_code',\\\\n       'is_first_booking', 'is_user_logged_in'],\\\\n      dtype='object')] are in the [columns]\\\"\",\n     \"output_type\": \"error\",\n     \"traceback\": [\n      \"\\u001B[0;31m---------------------------------------------------------------------------\\u001B[0m\",\n      \"\\u001B[0;31mKeyError\\u001B[0m                                  Traceback (most recent call last)\",\n      \"\\u001B[0;32m/var/folders/g4/gm4pqnsj5rv4yy7vyw0s95700000gn/T/ipykernel_88406/348235248.py\\u001B[0m in \\u001B[0;36m<module>\\u001B[0;34m\\u001B[0m\\n\\u001B[1;32m      1\\u001B[0m \\u001B[0madd_extra_features\\u001B[0m\\u001B[0;34m(\\u001B[0m\\u001B[0mdf\\u001B[0m\\u001B[0;34m)\\u001B[0m\\u001B[0;34m\\u001B[0m\\u001B[0;34m\\u001B[0m\\u001B[0m\\n\\u001B[0;32m----> 2\\u001B[0;31m \\u001B[0mdf\\u001B[0m \\u001B[0;34m=\\u001B[0m \\u001B[0mpreprocess_remove_columns_add_dummy\\u001B[0m\\u001B[0;34m(\\u001B[0m\\u001B[0mdf\\u001B[0m\\u001B[0;34m)\\u001B[0m\\u001B[0;34m\\u001B[0m\\u001B[0;34m\\u001B[0m\\u001B[0m\\n\\u001B[0m\\u001B[1;32m      3\\u001B[0m \\u001B[0mdf\\u001B[0m\\u001B[0;34m.\\u001B[0m\\u001B[0mnunique\\u001B[0m\\u001B[0;34m\\u001B[0m\\u001B[0;34m\\u001B[0m\\u001B[0m\\n\\u001B[1;32m      4\\u001B[0m \\u001B[0;31m#add columns\\u001B[0m\\u001B[0;34m\\u001B[0m\\u001B[0;34m\\u001B[0m\\u001B[0;34m\\u001B[0m\\u001B[0m\\n\\u001B[1;32m      5\\u001B[0m \\u001B[0;31m# print(df['order_canceled'].head(100))\\u001B[0m\\u001B[0;34m\\u001B[0m\\u001B[0;34m\\u001B[0m\\u001B[0;34m\\u001B[0m\\u001B[0m\\n\",\n      \"\\u001B[0;32m/var/folders/g4/gm4pqnsj5rv4yy7vyw0s95700000gn/T/ipykernel_88406/2710255217.py\\u001B[0m in \\u001B[0;36mpreprocess_remove_columns_add_dummy\\u001B[0;34m(X)\\u001B[0m\\n\\u001B[1;32m      5\\u001B[0m     \\u001B[0;32mfor\\u001B[0m \\u001B[0mfeat\\u001B[0m \\u001B[0;32min\\u001B[0m \\u001B[0m_irrelevant_features\\u001B[0m\\u001B[0;34m:\\u001B[0m\\u001B[0;34m\\u001B[0m\\u001B[0;34m\\u001B[0m\\u001B[0m\\n\\u001B[1;32m      6\\u001B[0m         \\u001B[0mX\\u001B[0m \\u001B[0;34m=\\u001B[0m \\u001B[0mX\\u001B[0m\\u001B[0;34m.\\u001B[0m\\u001B[0mdrop\\u001B[0m\\u001B[0;34m(\\u001B[0m\\u001B[0mfeat\\u001B[0m\\u001B[0;34m,\\u001B[0m \\u001B[0maxis\\u001B[0m\\u001B[0;34m=\\u001B[0m\\u001B[0;36m1\\u001B[0m\\u001B[0;34m)\\u001B[0m\\u001B[0;34m\\u001B[0m\\u001B[0;34m\\u001B[0m\\u001B[0m\\n\\u001B[0;32m----> 7\\u001B[0;31m     \\u001B[0mX\\u001B[0m \\u001B[0;34m=\\u001B[0m \\u001B[0mpd\\u001B[0m\\u001B[0;34m.\\u001B[0m\\u001B[0mget_dummies\\u001B[0m\\u001B[0;34m(\\u001B[0m\\u001B[0mdf\\u001B[0m\\u001B[0;34m,\\u001B[0m \\u001B[0mprefix\\u001B[0m\\u001B[0;34m=\\u001B[0m\\u001B[0m_categorial_features\\u001B[0m\\u001B[0;34m,\\u001B[0m \\u001B[0mcolumns\\u001B[0m\\u001B[0;34m=\\u001B[0m\\u001B[0m_categorial_features\\u001B[0m\\u001B[0;34m)\\u001B[0m\\u001B[0;34m\\u001B[0m\\u001B[0;34m\\u001B[0m\\u001B[0m\\n\\u001B[0m\\u001B[1;32m      8\\u001B[0m     \\u001B[0;32mreturn\\u001B[0m \\u001B[0mX\\u001B[0m\\u001B[0;34m\\u001B[0m\\u001B[0;34m\\u001B[0m\\u001B[0m\\n\\u001B[1;32m      9\\u001B[0m \\u001B[0;34m\\u001B[0m\\u001B[0m\\n\",\n      \"\\u001B[0;32m~/opt/anaconda3/envs/iml.env/lib/python3.7/site-packages/pandas/core/reshape/reshape.py\\u001B[0m in \\u001B[0;36mget_dummies\\u001B[0;34m(data, prefix, prefix_sep, dummy_na, columns, sparse, drop_first, dtype)\\u001B[0m\\n\\u001B[1;32m    888\\u001B[0m             \\u001B[0;32mraise\\u001B[0m \\u001B[0mTypeError\\u001B[0m\\u001B[0;34m(\\u001B[0m\\u001B[0;34m\\\"Input must be a list-like for parameter `columns`\\\"\\u001B[0m\\u001B[0;34m)\\u001B[0m\\u001B[0;34m\\u001B[0m\\u001B[0;34m\\u001B[0m\\u001B[0m\\n\\u001B[1;32m    889\\u001B[0m         \\u001B[0;32melse\\u001B[0m\\u001B[0;34m:\\u001B[0m\\u001B[0;34m\\u001B[0m\\u001B[0;34m\\u001B[0m\\u001B[0m\\n\\u001B[0;32m--> 890\\u001B[0;31m             \\u001B[0mdata_to_encode\\u001B[0m \\u001B[0;34m=\\u001B[0m \\u001B[0mdata\\u001B[0m\\u001B[0;34m[\\u001B[0m\\u001B[0mcolumns\\u001B[0m\\u001B[0;34m]\\u001B[0m\\u001B[0;34m\\u001B[0m\\u001B[0;34m\\u001B[0m\\u001B[0m\\n\\u001B[0m\\u001B[1;32m    891\\u001B[0m \\u001B[0;34m\\u001B[0m\\u001B[0m\\n\\u001B[1;32m    892\\u001B[0m         \\u001B[0;31m# validate prefixes and separator to avoid silently dropping cols\\u001B[0m\\u001B[0;34m\\u001B[0m\\u001B[0;34m\\u001B[0m\\u001B[0;34m\\u001B[0m\\u001B[0m\\n\",\n      \"\\u001B[0;32m~/opt/anaconda3/envs/iml.env/lib/python3.7/site-packages/pandas/core/frame.py\\u001B[0m in \\u001B[0;36m__getitem__\\u001B[0;34m(self, key)\\u001B[0m\\n\\u001B[1;32m   3462\\u001B[0m             \\u001B[0;32mif\\u001B[0m \\u001B[0mis_iterator\\u001B[0m\\u001B[0;34m(\\u001B[0m\\u001B[0mkey\\u001B[0m\\u001B[0;34m)\\u001B[0m\\u001B[0;34m:\\u001B[0m\\u001B[0;34m\\u001B[0m\\u001B[0;34m\\u001B[0m\\u001B[0m\\n\\u001B[1;32m   3463\\u001B[0m                 \\u001B[0mkey\\u001B[0m \\u001B[0;34m=\\u001B[0m \\u001B[0mlist\\u001B[0m\\u001B[0;34m(\\u001B[0m\\u001B[0mkey\\u001B[0m\\u001B[0;34m)\\u001B[0m\\u001B[0;34m\\u001B[0m\\u001B[0;34m\\u001B[0m\\u001B[0m\\n\\u001B[0;32m-> 3464\\u001B[0;31m             \\u001B[0mindexer\\u001B[0m \\u001B[0;34m=\\u001B[0m \\u001B[0mself\\u001B[0m\\u001B[0;34m.\\u001B[0m\\u001B[0mloc\\u001B[0m\\u001B[0;34m.\\u001B[0m\\u001B[0m_get_listlike_indexer\\u001B[0m\\u001B[0;34m(\\u001B[0m\\u001B[0mkey\\u001B[0m\\u001B[0;34m,\\u001B[0m \\u001B[0maxis\\u001B[0m\\u001B[0;34m=\\u001B[0m\\u001B[0;36m1\\u001B[0m\\u001B[0;34m)\\u001B[0m\\u001B[0;34m[\\u001B[0m\\u001B[0;36m1\\u001B[0m\\u001B[0;34m]\\u001B[0m\\u001B[0;34m\\u001B[0m\\u001B[0;34m\\u001B[0m\\u001B[0m\\n\\u001B[0m\\u001B[1;32m   3465\\u001B[0m \\u001B[0;34m\\u001B[0m\\u001B[0m\\n\\u001B[1;32m   3466\\u001B[0m         \\u001B[0;31m# take() does not accept boolean indexers\\u001B[0m\\u001B[0;34m\\u001B[0m\\u001B[0;34m\\u001B[0m\\u001B[0;34m\\u001B[0m\\u001B[0m\\n\",\n      \"\\u001B[0;32m~/opt/anaconda3/envs/iml.env/lib/python3.7/site-packages/pandas/core/indexing.py\\u001B[0m in \\u001B[0;36m_get_listlike_indexer\\u001B[0;34m(self, key, axis)\\u001B[0m\\n\\u001B[1;32m   1312\\u001B[0m             \\u001B[0mkeyarr\\u001B[0m\\u001B[0;34m,\\u001B[0m \\u001B[0mindexer\\u001B[0m\\u001B[0;34m,\\u001B[0m \\u001B[0mnew_indexer\\u001B[0m \\u001B[0;34m=\\u001B[0m \\u001B[0max\\u001B[0m\\u001B[0;34m.\\u001B[0m\\u001B[0m_reindex_non_unique\\u001B[0m\\u001B[0;34m(\\u001B[0m\\u001B[0mkeyarr\\u001B[0m\\u001B[0;34m)\\u001B[0m\\u001B[0;34m\\u001B[0m\\u001B[0;34m\\u001B[0m\\u001B[0m\\n\\u001B[1;32m   1313\\u001B[0m \\u001B[0;34m\\u001B[0m\\u001B[0m\\n\\u001B[0;32m-> 1314\\u001B[0;31m         \\u001B[0mself\\u001B[0m\\u001B[0;34m.\\u001B[0m\\u001B[0m_validate_read_indexer\\u001B[0m\\u001B[0;34m(\\u001B[0m\\u001B[0mkeyarr\\u001B[0m\\u001B[0;34m,\\u001B[0m \\u001B[0mindexer\\u001B[0m\\u001B[0;34m,\\u001B[0m \\u001B[0maxis\\u001B[0m\\u001B[0;34m)\\u001B[0m\\u001B[0;34m\\u001B[0m\\u001B[0;34m\\u001B[0m\\u001B[0m\\n\\u001B[0m\\u001B[1;32m   1315\\u001B[0m \\u001B[0;34m\\u001B[0m\\u001B[0m\\n\\u001B[1;32m   1316\\u001B[0m         if needs_i8_conversion(ax.dtype) or isinstance(\\n\",\n      \"\\u001B[0;32m~/opt/anaconda3/envs/iml.env/lib/python3.7/site-packages/pandas/core/indexing.py\\u001B[0m in \\u001B[0;36m_validate_read_indexer\\u001B[0;34m(self, key, indexer, axis)\\u001B[0m\\n\\u001B[1;32m   1372\\u001B[0m                 \\u001B[0;32mif\\u001B[0m \\u001B[0muse_interval_msg\\u001B[0m\\u001B[0;34m:\\u001B[0m\\u001B[0;34m\\u001B[0m\\u001B[0;34m\\u001B[0m\\u001B[0m\\n\\u001B[1;32m   1373\\u001B[0m                     \\u001B[0mkey\\u001B[0m \\u001B[0;34m=\\u001B[0m \\u001B[0mlist\\u001B[0m\\u001B[0;34m(\\u001B[0m\\u001B[0mkey\\u001B[0m\\u001B[0;34m)\\u001B[0m\\u001B[0;34m\\u001B[0m\\u001B[0;34m\\u001B[0m\\u001B[0m\\n\\u001B[0;32m-> 1374\\u001B[0;31m                 \\u001B[0;32mraise\\u001B[0m \\u001B[0mKeyError\\u001B[0m\\u001B[0;34m(\\u001B[0m\\u001B[0;34mf\\\"None of [{key}] are in the [{axis_name}]\\\"\\u001B[0m\\u001B[0;34m)\\u001B[0m\\u001B[0;34m\\u001B[0m\\u001B[0;34m\\u001B[0m\\u001B[0m\\n\\u001B[0m\\u001B[1;32m   1375\\u001B[0m \\u001B[0;34m\\u001B[0m\\u001B[0m\\n\\u001B[1;32m   1376\\u001B[0m             \\u001B[0mnot_found\\u001B[0m \\u001B[0;34m=\\u001B[0m \\u001B[0mlist\\u001B[0m\\u001B[0;34m(\\u001B[0m\\u001B[0mensure_index\\u001B[0m\\u001B[0;34m(\\u001B[0m\\u001B[0mkey\\u001B[0m\\u001B[0;34m)\\u001B[0m\\u001B[0;34m[\\u001B[0m\\u001B[0mmissing_mask\\u001B[0m\\u001B[0;34m.\\u001B[0m\\u001B[0mnonzero\\u001B[0m\\u001B[0;34m(\\u001B[0m\\u001B[0;34m)\\u001B[0m\\u001B[0;34m[\\u001B[0m\\u001B[0;36m0\\u001B[0m\\u001B[0;34m]\\u001B[0m\\u001B[0;34m]\\u001B[0m\\u001B[0;34m.\\u001B[0m\\u001B[0munique\\u001B[0m\\u001B[0;34m(\\u001B[0m\\u001B[0;34m)\\u001B[0m\\u001B[0;34m)\\u001B[0m\\u001B[0;34m\\u001B[0m\\u001B[0;34m\\u001B[0m\\u001B[0m\\n\",\n      \"\\u001B[0;31mKeyError\\u001B[0m: \\\"None of [Index(['hotel_country_code', 'accommadation_type_name', 'charge_option',\\\\n       'customer_nationality', 'guest_nationality_country_name',\\\\n       'origin_country_code', 'original_payment_method',\\\\n       'original_payment_type', 'original_payment_currency', 'hotel_area_code',\\\\n       'is_first_booking', 'is_user_logged_in'],\\\\n      dtype='object')] are in the [columns]\\\"\"\n     ]\n    }\n   ],\n   \"source\": [\n    \"add_extra_features(df)\\n\",\n    \"df = preprocess_remove_columns_add_dummy(df)\\n\",\n    \"df.nunique\\n\",\n    \"#add columns\\n\",\n    \"# print(df['order_canceled'].head(100))\\n\",\n    \"# print(df['cencel_code_day_two'].head(100))\"\n   ],\n   \"metadata\": {\n    \"collapsed\": false,\n    \"pycharm\": {\n     \"name\": \"#%%\\n\"\n    }\n   }\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 63,\n   \"outputs\": [\n    {\n     \"name\": \"stdout\",\n     \"output_type\": \"stream\",\n     \"text\": [\n      \"Train set size: 35195\\n\",\n      \"Validation set size: 11732\\n\",\n      \"Test set size: 11732\\n\"\n     ]\n    },\n    {\n     \"ename\": \"TypeError\",\n     \"evalue\": \"float() argument must be a string or a number, not 'Timestamp'\",\n     \"output_type\": \"error\",\n     \"traceback\": [\n      \"\\u001B[0;31m---------------------------------------------------------------------------\\u001B[0m\",\n      \"\\u001B[0;31mTypeError\\u001B[0m                                 Traceback (most recent call last)\",\n      \"\\u001B[0;32m/var/folders/g4/gm4pqnsj5rv4yy7vyw0s95700000gn/T/ipykernel_88406/1294938242.py\\u001B[0m in \\u001B[0;36m<module>\\u001B[0;34m\\u001B[0m\\n\\u001B[1;32m      1\\u001B[0m \\u001B[0;32mfrom\\u001B[0m \\u001B[0mClassification\\u001B[0m \\u001B[0;32mimport\\u001B[0m \\u001B[0mClassification\\u001B[0m\\u001B[0;34m\\u001B[0m\\u001B[0;34m\\u001B[0m\\u001B[0m\\n\\u001B[1;32m      2\\u001B[0m \\u001B[0mtrain_df\\u001B[0m\\u001B[0;34m,\\u001B[0m \\u001B[0mtest_df\\u001B[0m\\u001B[0;34m,\\u001B[0m \\u001B[0mvalidation_df\\u001B[0m \\u001B[0;34m=\\u001B[0m \\u001B[0msplit_data\\u001B[0m\\u001B[0;34m(\\u001B[0m\\u001B[0mdf\\u001B[0m\\u001B[0;34m)\\u001B[0m\\u001B[0;34m\\u001B[0m\\u001B[0;34m\\u001B[0m\\u001B[0m\\n\\u001B[0;32m----> 3\\u001B[0;31m \\u001B[0mClassification\\u001B[0m\\u001B[0;34m(\\u001B[0m\\u001B[0;34m)\\u001B[0m\\u001B[0;34m.\\u001B[0m\\u001B[0mrun_all\\u001B[0m\\u001B[0;34m(\\u001B[0m\\u001B[0mtrain_df\\u001B[0m\\u001B[0;34m,\\u001B[0m\\u001B[0mtrain_df\\u001B[0m\\u001B[0;34m[\\u001B[0m\\u001B[0;34m'order_canceled'\\u001B[0m\\u001B[0;34m]\\u001B[0m\\u001B[0;34m,\\u001B[0m\\u001B[0mtest_df\\u001B[0m\\u001B[0;34m,\\u001B[0m\\u001B[0mtest_df\\u001B[0m\\u001B[0;34m[\\u001B[0m\\u001B[0;34m'order_canceled'\\u001B[0m\\u001B[0;34m]\\u001B[0m\\u001B[0;34m)\\u001B[0m\\u001B[0;34m\\u001B[0m\\u001B[0;34m\\u001B[0m\\u001B[0m\\n\\u001B[0m\",\n      \"\\u001B[0;32m~/Documents/iml_hackathon/Classification.py\\u001B[0m in \\u001B[0;36mrun_all\\u001B[0;34m(self, X_train, y_train, X_test, y_test)\\u001B[0m\\n\\u001B[1;32m    218\\u001B[0m \\u001B[0;34m\\u001B[0m\\u001B[0m\\n\\u001B[1;32m    219\\u001B[0m     \\u001B[0;32mdef\\u001B[0m \\u001B[0mrun_all\\u001B[0m\\u001B[0;34m(\\u001B[0m\\u001B[0mself\\u001B[0m\\u001B[0;34m,\\u001B[0m \\u001B[0mX_train\\u001B[0m\\u001B[0;34m,\\u001B[0m \\u001B[0my_train\\u001B[0m\\u001B[0;34m,\\u001B[0m \\u001B[0mX_test\\u001B[0m\\u001B[0;34m,\\u001B[0m \\u001B[0my_test\\u001B[0m\\u001B[0;34m)\\u001B[0m\\u001B[0;34m:\\u001B[0m\\u001B[0;34m\\u001B[0m\\u001B[0;34m\\u001B[0m\\u001B[0m\\n\\u001B[0;32m--> 220\\u001B[0;31m         \\u001B[0mX_train_std\\u001B[0m\\u001B[0;34m,\\u001B[0m \\u001B[0mX_test_std\\u001B[0m\\u001B[0;34m,\\u001B[0m \\u001B[0mX_train_mm\\u001B[0m\\u001B[0;34m,\\u001B[0m \\u001B[0mX_test_mm\\u001B[0m \\u001B[0;34m=\\u001B[0m \\u001B[0mself\\u001B[0m\\u001B[0;34m.\\u001B[0m\\u001B[0mdata_scaling\\u001B[0m\\u001B[0;34m(\\u001B[0m\\u001B[0mX_train\\u001B[0m\\u001B[0;34m,\\u001B[0m \\u001B[0mX_test\\u001B[0m\\u001B[0;34m)\\u001B[0m\\u001B[0;34m\\u001B[0m\\u001B[0;34m\\u001B[0m\\u001B[0m\\n\\u001B[0m\\u001B[1;32m    221\\u001B[0m \\u001B[0;34m\\u001B[0m\\u001B[0m\\n\\u001B[1;32m    222\\u001B[0m         \\u001B[0mprint\\u001B[0m\\u001B[0;34m(\\u001B[0m\\u001B[0;34m\\\"logistic_regression:\\\"\\u001B[0m\\u001B[0;34m)\\u001B[0m\\u001B[0;34m\\u001B[0m\\u001B[0;34m\\u001B[0m\\u001B[0m\\n\",\n      \"\\u001B[0;32m~/Documents/iml_hackathon/Classification.py\\u001B[0m in \\u001B[0;36mdata_scaling\\u001B[0;34m(self, X_train, X_test)\\u001B[0m\\n\\u001B[1;32m    207\\u001B[0m     \\u001B[0;32mdef\\u001B[0m \\u001B[0mdata_scaling\\u001B[0m\\u001B[0;34m(\\u001B[0m\\u001B[0mself\\u001B[0m\\u001B[0;34m,\\u001B[0m \\u001B[0mX_train\\u001B[0m\\u001B[0;34m,\\u001B[0m \\u001B[0mX_test\\u001B[0m\\u001B[0;34m)\\u001B[0m\\u001B[0;34m:\\u001B[0m\\u001B[0;34m\\u001B[0m\\u001B[0;34m\\u001B[0m\\u001B[0m\\n\\u001B[1;32m    208\\u001B[0m         \\u001B[0mstd_scaler\\u001B[0m \\u001B[0;34m=\\u001B[0m \\u001B[0mStandardScaler\\u001B[0m\\u001B[0;34m(\\u001B[0m\\u001B[0;34m)\\u001B[0m\\u001B[0;34m\\u001B[0m\\u001B[0;34m\\u001B[0m\\u001B[0m\\n\\u001B[0;32m--> 209\\u001B[0;31m         \\u001B[0mstd_scaler\\u001B[0m\\u001B[0;34m.\\u001B[0m\\u001B[0mfit\\u001B[0m\\u001B[0;34m(\\u001B[0m\\u001B[0mX_train\\u001B[0m\\u001B[0;34m)\\u001B[0m\\u001B[0;34m\\u001B[0m\\u001B[0;34m\\u001B[0m\\u001B[0m\\n\\u001B[0m\\u001B[1;32m    210\\u001B[0m         \\u001B[0mX_train_std\\u001B[0m \\u001B[0;34m=\\u001B[0m \\u001B[0mstd_scaler\\u001B[0m\\u001B[0;34m.\\u001B[0m\\u001B[0mtransform\\u001B[0m\\u001B[0;34m(\\u001B[0m\\u001B[0mX_train\\u001B[0m\\u001B[0;34m)\\u001B[0m\\u001B[0;34m\\u001B[0m\\u001B[0;34m\\u001B[0m\\u001B[0m\\n\\u001B[1;32m    211\\u001B[0m         \\u001B[0mX_test_std\\u001B[0m \\u001B[0;34m=\\u001B[0m \\u001B[0mstd_scaler\\u001B[0m\\u001B[0;34m.\\u001B[0m\\u001B[0mtransform\\u001B[0m\\u001B[0;34m(\\u001B[0m\\u001B[0mX_test\\u001B[0m\\u001B[0;34m)\\u001B[0m\\u001B[0;34m\\u001B[0m\\u001B[0;34m\\u001B[0m\\u001B[0m\\n\",\n      \"\\u001B[0;32m~/opt/anaconda3/envs/iml.env/lib/python3.7/site-packages/sklearn/preprocessing/_data.py\\u001B[0m in \\u001B[0;36mfit\\u001B[0;34m(self, X, y, sample_weight)\\u001B[0m\\n\\u001B[1;32m    804\\u001B[0m         \\u001B[0;31m# Reset internal state before fitting\\u001B[0m\\u001B[0;34m\\u001B[0m\\u001B[0;34m\\u001B[0m\\u001B[0;34m\\u001B[0m\\u001B[0m\\n\\u001B[1;32m    805\\u001B[0m         \\u001B[0mself\\u001B[0m\\u001B[0;34m.\\u001B[0m\\u001B[0m_reset\\u001B[0m\\u001B[0;34m(\\u001B[0m\\u001B[0;34m)\\u001B[0m\\u001B[0;34m\\u001B[0m\\u001B[0;34m\\u001B[0m\\u001B[0m\\n\\u001B[0;32m--> 806\\u001B[0;31m         \\u001B[0;32mreturn\\u001B[0m \\u001B[0mself\\u001B[0m\\u001B[0;34m.\\u001B[0m\\u001B[0mpartial_fit\\u001B[0m\\u001B[0;34m(\\u001B[0m\\u001B[0mX\\u001B[0m\\u001B[0;34m,\\u001B[0m \\u001B[0my\\u001B[0m\\u001B[0;34m,\\u001B[0m \\u001B[0msample_weight\\u001B[0m\\u001B[0;34m)\\u001B[0m\\u001B[0;34m\\u001B[0m\\u001B[0;34m\\u001B[0m\\u001B[0m\\n\\u001B[0m\\u001B[1;32m    807\\u001B[0m \\u001B[0;34m\\u001B[0m\\u001B[0m\\n\\u001B[1;32m    808\\u001B[0m     \\u001B[0;32mdef\\u001B[0m \\u001B[0mpartial_fit\\u001B[0m\\u001B[0;34m(\\u001B[0m\\u001B[0mself\\u001B[0m\\u001B[0;34m,\\u001B[0m \\u001B[0mX\\u001B[0m\\u001B[0;34m,\\u001B[0m \\u001B[0my\\u001B[0m\\u001B[0;34m=\\u001B[0m\\u001B[0;32mNone\\u001B[0m\\u001B[0;34m,\\u001B[0m \\u001B[0msample_weight\\u001B[0m\\u001B[0;34m=\\u001B[0m\\u001B[0;32mNone\\u001B[0m\\u001B[0;34m)\\u001B[0m\\u001B[0;34m:\\u001B[0m\\u001B[0;34m\\u001B[0m\\u001B[0;34m\\u001B[0m\\u001B[0m\\n\",\n      \"\\u001B[0;32m~/opt/anaconda3/envs/iml.env/lib/python3.7/site-packages/sklearn/preprocessing/_data.py\\u001B[0m in \\u001B[0;36mpartial_fit\\u001B[0;34m(self, X, y, sample_weight)\\u001B[0m\\n\\u001B[1;32m    845\\u001B[0m             \\u001B[0mdtype\\u001B[0m\\u001B[0;34m=\\u001B[0m\\u001B[0mFLOAT_DTYPES\\u001B[0m\\u001B[0;34m,\\u001B[0m\\u001B[0;34m\\u001B[0m\\u001B[0;34m\\u001B[0m\\u001B[0m\\n\\u001B[1;32m    846\\u001B[0m             \\u001B[0mforce_all_finite\\u001B[0m\\u001B[0;34m=\\u001B[0m\\u001B[0;34m\\\"allow-nan\\\"\\u001B[0m\\u001B[0;34m,\\u001B[0m\\u001B[0;34m\\u001B[0m\\u001B[0;34m\\u001B[0m\\u001B[0m\\n\\u001B[0;32m--> 847\\u001B[0;31m             \\u001B[0mreset\\u001B[0m\\u001B[0;34m=\\u001B[0m\\u001B[0mfirst_call\\u001B[0m\\u001B[0;34m,\\u001B[0m\\u001B[0;34m\\u001B[0m\\u001B[0;34m\\u001B[0m\\u001B[0m\\n\\u001B[0m\\u001B[1;32m    848\\u001B[0m         )\\n\\u001B[1;32m    849\\u001B[0m         \\u001B[0mn_features\\u001B[0m \\u001B[0;34m=\\u001B[0m \\u001B[0mX\\u001B[0m\\u001B[0;34m.\\u001B[0m\\u001B[0mshape\\u001B[0m\\u001B[0;34m[\\u001B[0m\\u001B[0;36m1\\u001B[0m\\u001B[0;34m]\\u001B[0m\\u001B[0;34m\\u001B[0m\\u001B[0;34m\\u001B[0m\\u001B[0m\\n\",\n      \"\\u001B[0;32m~/opt/anaconda3/envs/iml.env/lib/python3.7/site-packages/sklearn/base.py\\u001B[0m in \\u001B[0;36m_validate_data\\u001B[0;34m(self, X, y, reset, validate_separately, **check_params)\\u001B[0m\\n\\u001B[1;32m    564\\u001B[0m             \\u001B[0;32mraise\\u001B[0m \\u001B[0mValueError\\u001B[0m\\u001B[0;34m(\\u001B[0m\\u001B[0;34m\\\"Validation should be done on X, y or both.\\\"\\u001B[0m\\u001B[0;34m)\\u001B[0m\\u001B[0;34m\\u001B[0m\\u001B[0;34m\\u001B[0m\\u001B[0m\\n\\u001B[1;32m    565\\u001B[0m         \\u001B[0;32melif\\u001B[0m \\u001B[0;32mnot\\u001B[0m \\u001B[0mno_val_X\\u001B[0m \\u001B[0;32mand\\u001B[0m \\u001B[0mno_val_y\\u001B[0m\\u001B[0;34m:\\u001B[0m\\u001B[0;34m\\u001B[0m\\u001B[0;34m\\u001B[0m\\u001B[0m\\n\\u001B[0;32m--> 566\\u001B[0;31m             \\u001B[0mX\\u001B[0m \\u001B[0;34m=\\u001B[0m \\u001B[0mcheck_array\\u001B[0m\\u001B[0;34m(\\u001B[0m\\u001B[0mX\\u001B[0m\\u001B[0;34m,\\u001B[0m \\u001B[0;34m**\\u001B[0m\\u001B[0mcheck_params\\u001B[0m\\u001B[0;34m)\\u001B[0m\\u001B[0;34m\\u001B[0m\\u001B[0;34m\\u001B[0m\\u001B[0m\\n\\u001B[0m\\u001B[1;32m    567\\u001B[0m             \\u001B[0mout\\u001B[0m \\u001B[0;34m=\\u001B[0m \\u001B[0mX\\u001B[0m\\u001B[0;34m\\u001B[0m\\u001B[0;34m\\u001B[0m\\u001B[0m\\n\\u001B[1;32m    568\\u001B[0m         \\u001B[0;32melif\\u001B[0m \\u001B[0mno_val_X\\u001B[0m \\u001B[0;32mand\\u001B[0m \\u001B[0;32mnot\\u001B[0m \\u001B[0mno_val_y\\u001B[0m\\u001B[0;34m:\\u001B[0m\\u001B[0;34m\\u001B[0m\\u001B[0;34m\\u001B[0m\\u001B[0m\\n\",\n      \"\\u001B[0;32m~/opt/anaconda3/envs/iml.env/lib/python3.7/site-packages/sklearn/utils/validation.py\\u001B[0m in \\u001B[0;36mcheck_array\\u001B[0;34m(array, accept_sparse, accept_large_sparse, dtype, order, copy, force_all_finite, ensure_2d, allow_nd, ensure_min_samples, ensure_min_features, estimator)\\u001B[0m\\n\\u001B[1;32m    744\\u001B[0m                     \\u001B[0marray\\u001B[0m \\u001B[0;34m=\\u001B[0m \\u001B[0marray\\u001B[0m\\u001B[0;34m.\\u001B[0m\\u001B[0mastype\\u001B[0m\\u001B[0;34m(\\u001B[0m\\u001B[0mdtype\\u001B[0m\\u001B[0;34m,\\u001B[0m \\u001B[0mcasting\\u001B[0m\\u001B[0;34m=\\u001B[0m\\u001B[0;34m\\\"unsafe\\\"\\u001B[0m\\u001B[0;34m,\\u001B[0m \\u001B[0mcopy\\u001B[0m\\u001B[0;34m=\\u001B[0m\\u001B[0;32mFalse\\u001B[0m\\u001B[0;34m)\\u001B[0m\\u001B[0;34m\\u001B[0m\\u001B[0;34m\\u001B[0m\\u001B[0m\\n\\u001B[1;32m    745\\u001B[0m                 \\u001B[0;32melse\\u001B[0m\\u001B[0;34m:\\u001B[0m\\u001B[0;34m\\u001B[0m\\u001B[0;34m\\u001B[0m\\u001B[0m\\n\\u001B[0;32m--> 746\\u001B[0;31m                     \\u001B[0marray\\u001B[0m \\u001B[0;34m=\\u001B[0m \\u001B[0mnp\\u001B[0m\\u001B[0;34m.\\u001B[0m\\u001B[0masarray\\u001B[0m\\u001B[0;34m(\\u001B[0m\\u001B[0marray\\u001B[0m\\u001B[0;34m,\\u001B[0m \\u001B[0morder\\u001B[0m\\u001B[0;34m=\\u001B[0m\\u001B[0morder\\u001B[0m\\u001B[0;34m,\\u001B[0m \\u001B[0mdtype\\u001B[0m\\u001B[0;34m=\\u001B[0m\\u001B[0mdtype\\u001B[0m\\u001B[0;34m)\\u001B[0m\\u001B[0;34m\\u001B[0m\\u001B[0;34m\\u001B[0m\\u001B[0m\\n\\u001B[0m\\u001B[1;32m    747\\u001B[0m             \\u001B[0;32mexcept\\u001B[0m \\u001B[0mComplexWarning\\u001B[0m \\u001B[0;32mas\\u001B[0m \\u001B[0mcomplex_warning\\u001B[0m\\u001B[0;34m:\\u001B[0m\\u001B[0;34m\\u001B[0m\\u001B[0;34m\\u001B[0m\\u001B[0m\\n\\u001B[1;32m    748\\u001B[0m                 raise ValueError(\\n\",\n      \"\\u001B[0;32m~/opt/anaconda3/envs/iml.env/lib/python3.7/site-packages/pandas/core/generic.py\\u001B[0m in \\u001B[0;36m__array__\\u001B[0;34m(self, dtype)\\u001B[0m\\n\\u001B[1;32m   1991\\u001B[0m \\u001B[0;34m\\u001B[0m\\u001B[0m\\n\\u001B[1;32m   1992\\u001B[0m     \\u001B[0;32mdef\\u001B[0m \\u001B[0m__array__\\u001B[0m\\u001B[0;34m(\\u001B[0m\\u001B[0mself\\u001B[0m\\u001B[0;34m,\\u001B[0m \\u001B[0mdtype\\u001B[0m\\u001B[0;34m:\\u001B[0m \\u001B[0mNpDtype\\u001B[0m \\u001B[0;34m|\\u001B[0m \\u001B[0;32mNone\\u001B[0m \\u001B[0;34m=\\u001B[0m \\u001B[0;32mNone\\u001B[0m\\u001B[0;34m)\\u001B[0m \\u001B[0;34m->\\u001B[0m \\u001B[0mnp\\u001B[0m\\u001B[0;34m.\\u001B[0m\\u001B[0mndarray\\u001B[0m\\u001B[0;34m:\\u001B[0m\\u001B[0;34m\\u001B[0m\\u001B[0;34m\\u001B[0m\\u001B[0m\\n\\u001B[0;32m-> 1993\\u001B[0;31m         \\u001B[0;32mreturn\\u001B[0m \\u001B[0mnp\\u001B[0m\\u001B[0;34m.\\u001B[0m\\u001B[0masarray\\u001B[0m\\u001B[0;34m(\\u001B[0m\\u001B[0mself\\u001B[0m\\u001B[0;34m.\\u001B[0m\\u001B[0m_values\\u001B[0m\\u001B[0;34m,\\u001B[0m \\u001B[0mdtype\\u001B[0m\\u001B[0;34m=\\u001B[0m\\u001B[0mdtype\\u001B[0m\\u001B[0;34m)\\u001B[0m\\u001B[0;34m\\u001B[0m\\u001B[0;34m\\u001B[0m\\u001B[0m\\n\\u001B[0m\\u001B[1;32m   1994\\u001B[0m \\u001B[0;34m\\u001B[0m\\u001B[0m\\n\\u001B[1;32m   1995\\u001B[0m     def __array_wrap__(\\n\",\n      \"\\u001B[0;31mTypeError\\u001B[0m: float() argument must be a string or a number, not 'Timestamp'\"\n     ]\n    }\n   ],\n   \"source\": [\n    \"from Classification import Classification\\n\",\n    \"\\n\",\n    \"train_df, test_df, validation_df = split_data(df)\\n\",\n    \"Classification().run_all(train_df, train_df['order_canceled'], test_df, test_df['order_canceled'])\"\n   ],\n   \"metadata\": {\n    \"collapsed\": false,\n    \"pycharm\": {\n     \"name\": \"#%%\\n\"\n    }\n   }\n  }\n ],\n \"metadata\": {\n  \"kernelspec\": {\n   \"name\": \"conda-env-iml.env-py\",\n   \"language\": \"python\",\n   \"display_name\": \"Python [conda env:iml.env] *\"\n  },\n  \"language_info\": {\n   \"codemirror_mode\": {\n    \"name\": \"ipython\",\n    \"version\": 2\n   },\n   \"file_extension\": \".py\",\n   \"mimetype\": \"text/x-python\",\n   \"name\": \"python\",\n   \"nbconvert_exporter\": \"python\",\n   \"pygments_lexer\": \"ipython2\",\n   \"version\": \"2.7.6\"\n  }\n },\n \"nbformat\": 4,\n \"nbformat_minor\": 0\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/temp.ipynb b/temp.ipynb
--- a/temp.ipynb	(revision 7e0b65796b045fea9e8f4d0688d27e6567301b16)
+++ b/temp.ipynb	(date 1686206777510)
@@ -2,7 +2,7 @@
  "cells": [
   {
    "cell_type": "code",
-   "execution_count": 57,
+   "execution_count": 64,
    "metadata": {
     "collapsed": true,
     "pycharm": {
@@ -43,7 +43,7 @@
     "_categorial_features = [\"hotel_country_code\", \"accommadation_type_name\", \"charge_option\",\n",
     "                        \"customer_nationality\", \"guest_nationality_country_name\", \"origin_country_code\",\n",
     "                        \"original_payment_method\", \"original_payment_type\", \"original_payment_currency\",\n",
-    "                        \"hotel_area_code\", \"is_first_booking\", \"is_user_logged_in\"]  #\"cancellation_policy_code\","
+    "                        \"is_first_booking\", \"is_user_logged_in\"]  #\"cancellation_policy_code\",\"hotel_area_code\","
    ]
   },
   {
@@ -136,7 +136,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 42,
+   "execution_count": 104,
    "outputs": [],
    "source": [
     "def add_extra_features(X: pd.DataFrame):\n",
@@ -148,7 +148,7 @@
     "    X['cencel_code_day_two'] = df.apply(lambda row: parse_code_day_two(row['cancellation_policy_code']), axis=1)\n",
     "    X['cencel_code_return_two'] = df.apply(lambda row: parse_code_return_two(row['cancellation_policy_code']), axis=1)\n",
     "    X['parse_code_no_show'] = df.apply(lambda row: parse_code_no_show(row['cancellation_policy_code']), axis=1)\n",
-    "\n"
+    "    return X\n"
    ],
    "metadata": {
     "collapsed": false,
@@ -159,7 +159,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 48,
+   "execution_count": 119,
    "outputs": [],
    "source": [
     "import re\n",
@@ -167,8 +167,11 @@
     "\n",
     "def preprocess_remove_columns_add_dummy(X: pd.DataFrame):\n",
     "    for feat in _irrelevant_features:\n",
-    "        X = X.drop(feat, axis=1)\n",
-    "    X = pd.get_dummies(df, prefix=_categorial_features, columns=_categorial_features)\n",
+    "        X.drop(feat, axis=1, inplace=True)\n",
+    "    for date in _dates:\n",
+    "        print(date)\n",
+    "        X.drop(date, axis=1, inplace=True)\n",
+    "        X = pd.get_dummies(df, prefix=_categorial_features, columns=_categorial_features)\n",
     "    return X\n",
     "\n",
     "\n",
@@ -249,13 +252,14 @@
   },
   {
    "cell_type": "code",
-   "execution_count": null,
+   "execution_count": 106,
    "outputs": [],
    "source": [
     "def proccess_dates(df: pd.DataFrame):\n",
     "    for label in _dates:\n",
     "        df[f\"{label}_dayofyear\"] = df[label].dt.dayofyear\n",
-    "        df[f\"{label}_year\"] = df[label].dt.year"
+    "        df[f\"{label}_year\"] = df[label].dt.year\n",
+    "    return df"
    ],
    "metadata": {
     "collapsed": false,
@@ -324,25 +328,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 58,
-   "outputs": [],
-   "source": [
-    "#read data\n",
-    "# Specify the file path\n",
-    "file_path = './data_files/agoda_cancellation_train.csv'\n",
-    "# Read the CSV file into a DataFrame\n",
-    "df = load_data(file_path)"
-   ],
-   "metadata": {
-    "collapsed": false,
-    "pycharm": {
-     "name": "#%%\n"
-    }
-   }
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 59,
+   "execution_count": 120,
    "outputs": [
     {
      "name": "stdout",
@@ -474,9 +460,152 @@
     }
    ],
    "source": [
+    "#read data\n",
+    "# Specify the file path\n",
+    "file_path = './data_files/agoda_cancellation_train.csv'\n",
+    "# Read the CSV file into a DataFrame\n",
+    "df = load_data(file_path)\n",
     "# Print the DataFrame\n",
     "print(df.head())\n",
-    "print(df.info)"
+    "print(df.info)\n",
+    "\n"
+   ],
+   "metadata": {
+    "collapsed": false,
+    "pycharm": {
+     "name": "#%%\n"
+    }
+   }
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 121,
+   "outputs": [
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "          h_booking_id    booking_datetime checkin_date checkout_date  \\\n",
+      "0 -9223194055642672935 2018-06-28 21:15:00   2018-07-09    2018-07-13   \n",
+      "1 -9222713784330706132 2018-08-10 22:31:00   2018-08-16    2018-08-17   \n",
+      "2 -9222411208325704942 2018-09-14 07:55:00   2018-09-14    2018-09-15   \n",
+      "3 -9222220845872895471 2018-06-25 07:33:00   2018-07-02    2018-07-03   \n",
+      "4 -9221127186162682116 2018-07-23 10:06:00   2018-08-09    2018-08-10   \n",
+      "\n",
+      "   hotel_id hotel_country_code     hotel_live_date  hotel_star_rating  \\\n",
+      "0      6452                 HK 2009-06-28 02:02:00                4.0   \n",
+      "1     47729                 CN 2011-06-07 11:52:00                4.0   \n",
+      "2    780431                 KR 2014-11-20 15:43:00                4.0   \n",
+      "3    291365                 JP 2011-11-21 12:27:00                3.0   \n",
+      "4    479046                 TH 2013-06-06 10:04:00                3.0   \n",
+      "\n",
+      "  accommadation_type_name charge_option  ...  hotel_chain_code  \\\n",
+      "0                   Hotel       Pay Now  ...               NaN   \n",
+      "1                   Hotel     Pay Later  ...             600.0   \n",
+      "2                   Hotel       Pay Now  ...               NaN   \n",
+      "3                   Hotel     Pay Later  ...             236.0   \n",
+      "4                  Resort     Pay Later  ...               NaN   \n",
+      "\n",
+      "  hotel_city_code  order_canceled duration_days  booked_days_before  \\\n",
+      "0             142               1            -4                 -11   \n",
+      "1            1273               1            -1                  -6   \n",
+      "2            2799               1            -1                   0   \n",
+      "3            1448               1            -1                  -7   \n",
+      "4             616               1            -1                 -17   \n",
+      "\n",
+      "   cencel_code_day_one  cencel_code_return_one  cencel_code_day_two  \\\n",
+      "0                365.0                     1.0                  0.0   \n",
+      "1                  1.0                    -1.0                  0.0   \n",
+      "2                  2.0                    -1.0                  0.0   \n",
+      "3                  1.0                    -1.0                  0.0   \n",
+      "4                 14.0                     1.0                  0.0   \n",
+      "\n",
+      "  cencel_code_return_two parse_code_no_show  \n",
+      "0                    0.0                1.0  \n",
+      "1                    0.0               -1.0  \n",
+      "2                    0.0               -1.0  \n",
+      "3                    0.0                1.0  \n",
+      "4                    0.0                1.0  \n",
+      "\n",
+      "[5 rows x 47 columns]\n"
+     ]
+    }
+   ],
+   "source": [
+    "df = add_extra_features(df)\n",
+    "print(df.head())"
+   ],
+   "metadata": {
+    "collapsed": false,
+    "pycharm": {
+     "name": "#%%\n"
+    }
+   }
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 122,
+   "outputs": [
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "          h_booking_id    booking_datetime checkin_date checkout_date  \\\n",
+      "0 -9223194055642672935 2018-06-28 21:15:00   2018-07-09    2018-07-13   \n",
+      "1 -9222713784330706132 2018-08-10 22:31:00   2018-08-16    2018-08-17   \n",
+      "2 -9222411208325704942 2018-09-14 07:55:00   2018-09-14    2018-09-15   \n",
+      "3 -9222220845872895471 2018-06-25 07:33:00   2018-07-02    2018-07-03   \n",
+      "4 -9221127186162682116 2018-07-23 10:06:00   2018-08-09    2018-08-10   \n",
+      "\n",
+      "   hotel_id hotel_country_code     hotel_live_date  hotel_star_rating  \\\n",
+      "0      6452                 HK 2009-06-28 02:02:00                4.0   \n",
+      "1     47729                 CN 2011-06-07 11:52:00                4.0   \n",
+      "2    780431                 KR 2014-11-20 15:43:00                4.0   \n",
+      "3    291365                 JP 2011-11-21 12:27:00                3.0   \n",
+      "4    479046                 TH 2013-06-06 10:04:00                3.0   \n",
+      "\n",
+      "  accommadation_type_name charge_option  ...  booking_datetime_dayofyear  \\\n",
+      "0                   Hotel       Pay Now  ...                         179   \n",
+      "1                   Hotel     Pay Later  ...                         222   \n",
+      "2                   Hotel       Pay Now  ...                         257   \n",
+      "3                   Hotel     Pay Later  ...                         176   \n",
+      "4                  Resort     Pay Later  ...                         204   \n",
+      "\n",
+      "  booking_datetime_year  checkin_date_dayofyear checkin_date_year  \\\n",
+      "0                  2018                     190              2018   \n",
+      "1                  2018                     228              2018   \n",
+      "2                  2018                     257              2018   \n",
+      "3                  2018                     183              2018   \n",
+      "4                  2018                     221              2018   \n",
+      "\n",
+      "   checkout_date_dayofyear  checkout_date_year  hotel_live_date_dayofyear  \\\n",
+      "0                      194                2018                        179   \n",
+      "1                      229                2018                        158   \n",
+      "2                      258                2018                        324   \n",
+      "3                      184                2018                        325   \n",
+      "4                      222                2018                        157   \n",
+      "\n",
+      "   hotel_live_date_year cancellation_datetime_dayofyear  \\\n",
+      "0                  2009                             NaN   \n",
+      "1                  2011                             NaN   \n",
+      "2                  2014                             NaN   \n",
+      "3                  2011                             NaN   \n",
+      "4                  2013                           204.0   \n",
+      "\n",
+      "  cancellation_datetime_year  \n",
+      "0                        NaN  \n",
+      "1                        NaN  \n",
+      "2                        NaN  \n",
+      "3                        NaN  \n",
+      "4                     2018.0  \n",
+      "\n",
+      "[5 rows x 57 columns]\n"
+     ]
+    }
+   ],
+   "source": [
+    "df = proccess_dates(df)\n",
+    "print(df.head())"
    ],
    "metadata": {
     "collapsed": false,
@@ -487,29 +616,73 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 61,
+   "execution_count": 123,
    "outputs": [
     {
-     "ename": "KeyError",
-     "evalue": "\"None of [Index(['hotel_country_code', 'accommadation_type_name', 'charge_option',\\n       'customer_nationality', 'guest_nationality_country_name',\\n       'origin_country_code', 'original_payment_method',\\n       'original_payment_type', 'original_payment_currency', 'hotel_area_code',\\n       'is_first_booking', 'is_user_logged_in'],\\n      dtype='object')] are in the [columns]\"",
-     "output_type": "error",
-     "traceback": [
-      "\u001B[0;31m---------------------------------------------------------------------------\u001B[0m",
-      "\u001B[0;31mKeyError\u001B[0m                                  Traceback (most recent call last)",
-      "\u001B[0;32m/var/folders/g4/gm4pqnsj5rv4yy7vyw0s95700000gn/T/ipykernel_88406/348235248.py\u001B[0m in \u001B[0;36m<module>\u001B[0;34m\u001B[0m\n\u001B[1;32m      1\u001B[0m \u001B[0madd_extra_features\u001B[0m\u001B[0;34m(\u001B[0m\u001B[0mdf\u001B[0m\u001B[0;34m)\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[0;32m----> 2\u001B[0;31m \u001B[0mdf\u001B[0m \u001B[0;34m=\u001B[0m \u001B[0mpreprocess_remove_columns_add_dummy\u001B[0m\u001B[0;34m(\u001B[0m\u001B[0mdf\u001B[0m\u001B[0;34m)\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[0m\u001B[1;32m      3\u001B[0m \u001B[0mdf\u001B[0m\u001B[0;34m.\u001B[0m\u001B[0mnunique\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[1;32m      4\u001B[0m \u001B[0;31m#add columns\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[1;32m      5\u001B[0m \u001B[0;31m# print(df['order_canceled'].head(100))\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n",
-      "\u001B[0;32m/var/folders/g4/gm4pqnsj5rv4yy7vyw0s95700000gn/T/ipykernel_88406/2710255217.py\u001B[0m in \u001B[0;36mpreprocess_remove_columns_add_dummy\u001B[0;34m(X)\u001B[0m\n\u001B[1;32m      5\u001B[0m     \u001B[0;32mfor\u001B[0m \u001B[0mfeat\u001B[0m \u001B[0;32min\u001B[0m \u001B[0m_irrelevant_features\u001B[0m\u001B[0;34m:\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[1;32m      6\u001B[0m         \u001B[0mX\u001B[0m \u001B[0;34m=\u001B[0m \u001B[0mX\u001B[0m\u001B[0;34m.\u001B[0m\u001B[0mdrop\u001B[0m\u001B[0;34m(\u001B[0m\u001B[0mfeat\u001B[0m\u001B[0;34m,\u001B[0m \u001B[0maxis\u001B[0m\u001B[0;34m=\u001B[0m\u001B[0;36m1\u001B[0m\u001B[0;34m)\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[0;32m----> 7\u001B[0;31m     \u001B[0mX\u001B[0m \u001B[0;34m=\u001B[0m \u001B[0mpd\u001B[0m\u001B[0;34m.\u001B[0m\u001B[0mget_dummies\u001B[0m\u001B[0;34m(\u001B[0m\u001B[0mdf\u001B[0m\u001B[0;34m,\u001B[0m \u001B[0mprefix\u001B[0m\u001B[0;34m=\u001B[0m\u001B[0m_categorial_features\u001B[0m\u001B[0;34m,\u001B[0m \u001B[0mcolumns\u001B[0m\u001B[0;34m=\u001B[0m\u001B[0m_categorial_features\u001B[0m\u001B[0;34m)\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[0m\u001B[1;32m      8\u001B[0m     \u001B[0;32mreturn\u001B[0m \u001B[0mX\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[1;32m      9\u001B[0m \u001B[0;34m\u001B[0m\u001B[0m\n",
-      "\u001B[0;32m~/opt/anaconda3/envs/iml.env/lib/python3.7/site-packages/pandas/core/reshape/reshape.py\u001B[0m in \u001B[0;36mget_dummies\u001B[0;34m(data, prefix, prefix_sep, dummy_na, columns, sparse, drop_first, dtype)\u001B[0m\n\u001B[1;32m    888\u001B[0m             \u001B[0;32mraise\u001B[0m \u001B[0mTypeError\u001B[0m\u001B[0;34m(\u001B[0m\u001B[0;34m\"Input must be a list-like for parameter `columns`\"\u001B[0m\u001B[0;34m)\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[1;32m    889\u001B[0m         \u001B[0;32melse\u001B[0m\u001B[0;34m:\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[0;32m--> 890\u001B[0;31m             \u001B[0mdata_to_encode\u001B[0m \u001B[0;34m=\u001B[0m \u001B[0mdata\u001B[0m\u001B[0;34m[\u001B[0m\u001B[0mcolumns\u001B[0m\u001B[0;34m]\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[0m\u001B[1;32m    891\u001B[0m \u001B[0;34m\u001B[0m\u001B[0m\n\u001B[1;32m    892\u001B[0m         \u001B[0;31m# validate prefixes and separator to avoid silently dropping cols\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n",
-      "\u001B[0;32m~/opt/anaconda3/envs/iml.env/lib/python3.7/site-packages/pandas/core/frame.py\u001B[0m in \u001B[0;36m__getitem__\u001B[0;34m(self, key)\u001B[0m\n\u001B[1;32m   3462\u001B[0m             \u001B[0;32mif\u001B[0m \u001B[0mis_iterator\u001B[0m\u001B[0;34m(\u001B[0m\u001B[0mkey\u001B[0m\u001B[0;34m)\u001B[0m\u001B[0;34m:\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[1;32m   3463\u001B[0m                 \u001B[0mkey\u001B[0m \u001B[0;34m=\u001B[0m \u001B[0mlist\u001B[0m\u001B[0;34m(\u001B[0m\u001B[0mkey\u001B[0m\u001B[0;34m)\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[0;32m-> 3464\u001B[0;31m             \u001B[0mindexer\u001B[0m \u001B[0;34m=\u001B[0m \u001B[0mself\u001B[0m\u001B[0;34m.\u001B[0m\u001B[0mloc\u001B[0m\u001B[0;34m.\u001B[0m\u001B[0m_get_listlike_indexer\u001B[0m\u001B[0;34m(\u001B[0m\u001B[0mkey\u001B[0m\u001B[0;34m,\u001B[0m \u001B[0maxis\u001B[0m\u001B[0;34m=\u001B[0m\u001B[0;36m1\u001B[0m\u001B[0;34m)\u001B[0m\u001B[0;34m[\u001B[0m\u001B[0;36m1\u001B[0m\u001B[0;34m]\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[0m\u001B[1;32m   3465\u001B[0m \u001B[0;34m\u001B[0m\u001B[0m\n\u001B[1;32m   3466\u001B[0m         \u001B[0;31m# take() does not accept boolean indexers\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n",
-      "\u001B[0;32m~/opt/anaconda3/envs/iml.env/lib/python3.7/site-packages/pandas/core/indexing.py\u001B[0m in \u001B[0;36m_get_listlike_indexer\u001B[0;34m(self, key, axis)\u001B[0m\n\u001B[1;32m   1312\u001B[0m             \u001B[0mkeyarr\u001B[0m\u001B[0;34m,\u001B[0m \u001B[0mindexer\u001B[0m\u001B[0;34m,\u001B[0m \u001B[0mnew_indexer\u001B[0m \u001B[0;34m=\u001B[0m \u001B[0max\u001B[0m\u001B[0;34m.\u001B[0m\u001B[0m_reindex_non_unique\u001B[0m\u001B[0;34m(\u001B[0m\u001B[0mkeyarr\u001B[0m\u001B[0;34m)\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[1;32m   1313\u001B[0m \u001B[0;34m\u001B[0m\u001B[0m\n\u001B[0;32m-> 1314\u001B[0;31m         \u001B[0mself\u001B[0m\u001B[0;34m.\u001B[0m\u001B[0m_validate_read_indexer\u001B[0m\u001B[0;34m(\u001B[0m\u001B[0mkeyarr\u001B[0m\u001B[0;34m,\u001B[0m \u001B[0mindexer\u001B[0m\u001B[0;34m,\u001B[0m \u001B[0maxis\u001B[0m\u001B[0;34m)\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[0m\u001B[1;32m   1315\u001B[0m \u001B[0;34m\u001B[0m\u001B[0m\n\u001B[1;32m   1316\u001B[0m         if needs_i8_conversion(ax.dtype) or isinstance(\n",
-      "\u001B[0;32m~/opt/anaconda3/envs/iml.env/lib/python3.7/site-packages/pandas/core/indexing.py\u001B[0m in \u001B[0;36m_validate_read_indexer\u001B[0;34m(self, key, indexer, axis)\u001B[0m\n\u001B[1;32m   1372\u001B[0m                 \u001B[0;32mif\u001B[0m \u001B[0muse_interval_msg\u001B[0m\u001B[0;34m:\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[1;32m   1373\u001B[0m                     \u001B[0mkey\u001B[0m \u001B[0;34m=\u001B[0m \u001B[0mlist\u001B[0m\u001B[0;34m(\u001B[0m\u001B[0mkey\u001B[0m\u001B[0;34m)\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[0;32m-> 1374\u001B[0;31m                 \u001B[0;32mraise\u001B[0m \u001B[0mKeyError\u001B[0m\u001B[0;34m(\u001B[0m\u001B[0;34mf\"None of [{key}] are in the [{axis_name}]\"\u001B[0m\u001B[0;34m)\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[0m\u001B[1;32m   1375\u001B[0m \u001B[0;34m\u001B[0m\u001B[0m\n\u001B[1;32m   1376\u001B[0m             \u001B[0mnot_found\u001B[0m \u001B[0;34m=\u001B[0m \u001B[0mlist\u001B[0m\u001B[0;34m(\u001B[0m\u001B[0mensure_index\u001B[0m\u001B[0;34m(\u001B[0m\u001B[0mkey\u001B[0m\u001B[0;34m)\u001B[0m\u001B[0;34m[\u001B[0m\u001B[0mmissing_mask\u001B[0m\u001B[0;34m.\u001B[0m\u001B[0mnonzero\u001B[0m\u001B[0;34m(\u001B[0m\u001B[0;34m)\u001B[0m\u001B[0;34m[\u001B[0m\u001B[0;36m0\u001B[0m\u001B[0;34m]\u001B[0m\u001B[0;34m]\u001B[0m\u001B[0;34m.\u001B[0m\u001B[0munique\u001B[0m\u001B[0;34m(\u001B[0m\u001B[0;34m)\u001B[0m\u001B[0;34m)\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n",
-      "\u001B[0;31mKeyError\u001B[0m: \"None of [Index(['hotel_country_code', 'accommadation_type_name', 'charge_option',\\n       'customer_nationality', 'guest_nationality_country_name',\\n       'origin_country_code', 'original_payment_method',\\n       'original_payment_type', 'original_payment_currency', 'hotel_area_code',\\n       'is_first_booking', 'is_user_logged_in'],\\n      dtype='object')] are in the [columns]\""
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "booking_datetime\n",
+      "checkin_date\n",
+      "checkout_date\n",
+      "hotel_live_date\n",
+      "cancellation_datetime\n",
+      "  checkin_date checkout_date  hotel_id     hotel_live_date  hotel_star_rating  \\\n",
+      "0   2018-07-09    2018-07-13      6452 2009-06-28 02:02:00                4.0   \n",
+      "1   2018-08-16    2018-08-17     47729 2011-06-07 11:52:00                4.0   \n",
+      "2   2018-09-14    2018-09-15    780431 2014-11-20 15:43:00                4.0   \n",
+      "3   2018-07-02    2018-07-03    291365 2011-11-21 12:27:00                3.0   \n",
+      "4   2018-08-09    2018-08-10    479046 2013-06-06 10:04:00                3.0   \n",
+      "\n",
+      "         h_customer_id  guest_is_not_the_customer  no_of_adults  \\\n",
+      "0  6003835896819550002                          0             2   \n",
+      "1  6337727081989900092                          0             2   \n",
+      "2  4569478218455470035                          0             2   \n",
+      "3  5223266395530630065                          0             2   \n",
+      "4  2879166343687280017                          0             8   \n",
+      "\n",
+      "   no_of_children  no_of_extra_bed  ...  original_payment_currency_TWD  \\\n",
+      "0               0                0  ...                              0   \n",
+      "1               0                0  ...                              0   \n",
+      "2               0                0  ...                              0   \n",
+      "3               0                0  ...                              0   \n",
+      "4               0                0  ...                              0   \n",
+      "\n",
+      "  original_payment_currency_UAH  original_payment_currency_USD  \\\n",
+      "0                             0                              0   \n",
+      "1                             0                              0   \n",
+      "2                             0                              0   \n",
+      "3                             0                              0   \n",
+      "4                             0                              0   \n",
+      "\n",
+      "  original_payment_currency_VND original_payment_currency_XPF  \\\n",
+      "0                             0                             0   \n",
+      "1                             0                             0   \n",
+      "2                             0                             0   \n",
+      "3                             0                             0   \n",
+      "4                             0                             0   \n",
+      "\n",
+      "   original_payment_currency_ZAR  is_first_booking_False  \\\n",
+      "0                              0                       0   \n",
+      "1                              1                       1   \n",
+      "2                              0                       0   \n",
+      "3                              0                       1   \n",
+      "4                              0                       0   \n",
+      "\n",
+      "   is_first_booking_True  is_user_logged_in_False  is_user_logged_in_True  \n",
+      "0                      1                        1                       0  \n",
+      "1                      0                        1                       0  \n",
+      "2                      1                        1                       0  \n",
+      "3                      0                        0                       1  \n",
+      "4                      1                        1                       0  \n",
+      "\n",
+      "[5 rows x 715 columns]\n"
      ]
     }
    ],
    "source": [
-    "add_extra_features(df)\n",
     "df = preprocess_remove_columns_add_dummy(df)\n",
-    "df.nunique\n",
+    "print(df.head())\n",
     "#add columns\n",
     "# print(df['order_canceled'].head(100))\n",
     "# print(df['cencel_code_day_two'].head(100))"
@@ -523,7 +696,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 63,
+   "execution_count": 118,
    "outputs": [
     {
      "name": "stdout",
@@ -531,25 +704,8 @@
      "text": [
       "Train set size: 35195\n",
       "Validation set size: 11732\n",
-      "Test set size: 11732\n"
-     ]
-    },
-    {
-     "ename": "TypeError",
-     "evalue": "float() argument must be a string or a number, not 'Timestamp'",
-     "output_type": "error",
-     "traceback": [
-      "\u001B[0;31m---------------------------------------------------------------------------\u001B[0m",
-      "\u001B[0;31mTypeError\u001B[0m                                 Traceback (most recent call last)",
-      "\u001B[0;32m/var/folders/g4/gm4pqnsj5rv4yy7vyw0s95700000gn/T/ipykernel_88406/1294938242.py\u001B[0m in \u001B[0;36m<module>\u001B[0;34m\u001B[0m\n\u001B[1;32m      1\u001B[0m \u001B[0;32mfrom\u001B[0m \u001B[0mClassification\u001B[0m \u001B[0;32mimport\u001B[0m \u001B[0mClassification\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[1;32m      2\u001B[0m \u001B[0mtrain_df\u001B[0m\u001B[0;34m,\u001B[0m \u001B[0mtest_df\u001B[0m\u001B[0;34m,\u001B[0m \u001B[0mvalidation_df\u001B[0m \u001B[0;34m=\u001B[0m \u001B[0msplit_data\u001B[0m\u001B[0;34m(\u001B[0m\u001B[0mdf\u001B[0m\u001B[0;34m)\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[0;32m----> 3\u001B[0;31m \u001B[0mClassification\u001B[0m\u001B[0;34m(\u001B[0m\u001B[0;34m)\u001B[0m\u001B[0;34m.\u001B[0m\u001B[0mrun_all\u001B[0m\u001B[0;34m(\u001B[0m\u001B[0mtrain_df\u001B[0m\u001B[0;34m,\u001B[0m\u001B[0mtrain_df\u001B[0m\u001B[0;34m[\u001B[0m\u001B[0;34m'order_canceled'\u001B[0m\u001B[0;34m]\u001B[0m\u001B[0;34m,\u001B[0m\u001B[0mtest_df\u001B[0m\u001B[0;34m,\u001B[0m\u001B[0mtest_df\u001B[0m\u001B[0;34m[\u001B[0m\u001B[0;34m'order_canceled'\u001B[0m\u001B[0;34m]\u001B[0m\u001B[0;34m)\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[0m",
-      "\u001B[0;32m~/Documents/iml_hackathon/Classification.py\u001B[0m in \u001B[0;36mrun_all\u001B[0;34m(self, X_train, y_train, X_test, y_test)\u001B[0m\n\u001B[1;32m    218\u001B[0m \u001B[0;34m\u001B[0m\u001B[0m\n\u001B[1;32m    219\u001B[0m     \u001B[0;32mdef\u001B[0m \u001B[0mrun_all\u001B[0m\u001B[0;34m(\u001B[0m\u001B[0mself\u001B[0m\u001B[0;34m,\u001B[0m \u001B[0mX_train\u001B[0m\u001B[0;34m,\u001B[0m \u001B[0my_train\u001B[0m\u001B[0;34m,\u001B[0m \u001B[0mX_test\u001B[0m\u001B[0;34m,\u001B[0m \u001B[0my_test\u001B[0m\u001B[0;34m)\u001B[0m\u001B[0;34m:\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[0;32m--> 220\u001B[0;31m         \u001B[0mX_train_std\u001B[0m\u001B[0;34m,\u001B[0m \u001B[0mX_test_std\u001B[0m\u001B[0;34m,\u001B[0m \u001B[0mX_train_mm\u001B[0m\u001B[0;34m,\u001B[0m \u001B[0mX_test_mm\u001B[0m \u001B[0;34m=\u001B[0m \u001B[0mself\u001B[0m\u001B[0;34m.\u001B[0m\u001B[0mdata_scaling\u001B[0m\u001B[0;34m(\u001B[0m\u001B[0mX_train\u001B[0m\u001B[0;34m,\u001B[0m \u001B[0mX_test\u001B[0m\u001B[0;34m)\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[0m\u001B[1;32m    221\u001B[0m \u001B[0;34m\u001B[0m\u001B[0m\n\u001B[1;32m    222\u001B[0m         \u001B[0mprint\u001B[0m\u001B[0;34m(\u001B[0m\u001B[0;34m\"logistic_regression:\"\u001B[0m\u001B[0;34m)\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n",
-      "\u001B[0;32m~/Documents/iml_hackathon/Classification.py\u001B[0m in \u001B[0;36mdata_scaling\u001B[0;34m(self, X_train, X_test)\u001B[0m\n\u001B[1;32m    207\u001B[0m     \u001B[0;32mdef\u001B[0m \u001B[0mdata_scaling\u001B[0m\u001B[0;34m(\u001B[0m\u001B[0mself\u001B[0m\u001B[0;34m,\u001B[0m \u001B[0mX_train\u001B[0m\u001B[0;34m,\u001B[0m \u001B[0mX_test\u001B[0m\u001B[0;34m)\u001B[0m\u001B[0;34m:\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[1;32m    208\u001B[0m         \u001B[0mstd_scaler\u001B[0m \u001B[0;34m=\u001B[0m \u001B[0mStandardScaler\u001B[0m\u001B[0;34m(\u001B[0m\u001B[0;34m)\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[0;32m--> 209\u001B[0;31m         \u001B[0mstd_scaler\u001B[0m\u001B[0;34m.\u001B[0m\u001B[0mfit\u001B[0m\u001B[0;34m(\u001B[0m\u001B[0mX_train\u001B[0m\u001B[0;34m)\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[0m\u001B[1;32m    210\u001B[0m         \u001B[0mX_train_std\u001B[0m \u001B[0;34m=\u001B[0m \u001B[0mstd_scaler\u001B[0m\u001B[0;34m.\u001B[0m\u001B[0mtransform\u001B[0m\u001B[0;34m(\u001B[0m\u001B[0mX_train\u001B[0m\u001B[0;34m)\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[1;32m    211\u001B[0m         \u001B[0mX_test_std\u001B[0m \u001B[0;34m=\u001B[0m \u001B[0mstd_scaler\u001B[0m\u001B[0;34m.\u001B[0m\u001B[0mtransform\u001B[0m\u001B[0;34m(\u001B[0m\u001B[0mX_test\u001B[0m\u001B[0;34m)\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n",
-      "\u001B[0;32m~/opt/anaconda3/envs/iml.env/lib/python3.7/site-packages/sklearn/preprocessing/_data.py\u001B[0m in \u001B[0;36mfit\u001B[0;34m(self, X, y, sample_weight)\u001B[0m\n\u001B[1;32m    804\u001B[0m         \u001B[0;31m# Reset internal state before fitting\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[1;32m    805\u001B[0m         \u001B[0mself\u001B[0m\u001B[0;34m.\u001B[0m\u001B[0m_reset\u001B[0m\u001B[0;34m(\u001B[0m\u001B[0;34m)\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[0;32m--> 806\u001B[0;31m         \u001B[0;32mreturn\u001B[0m \u001B[0mself\u001B[0m\u001B[0;34m.\u001B[0m\u001B[0mpartial_fit\u001B[0m\u001B[0;34m(\u001B[0m\u001B[0mX\u001B[0m\u001B[0;34m,\u001B[0m \u001B[0my\u001B[0m\u001B[0;34m,\u001B[0m \u001B[0msample_weight\u001B[0m\u001B[0;34m)\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[0m\u001B[1;32m    807\u001B[0m \u001B[0;34m\u001B[0m\u001B[0m\n\u001B[1;32m    808\u001B[0m     \u001B[0;32mdef\u001B[0m \u001B[0mpartial_fit\u001B[0m\u001B[0;34m(\u001B[0m\u001B[0mself\u001B[0m\u001B[0;34m,\u001B[0m \u001B[0mX\u001B[0m\u001B[0;34m,\u001B[0m \u001B[0my\u001B[0m\u001B[0;34m=\u001B[0m\u001B[0;32mNone\u001B[0m\u001B[0;34m,\u001B[0m \u001B[0msample_weight\u001B[0m\u001B[0;34m=\u001B[0m\u001B[0;32mNone\u001B[0m\u001B[0;34m)\u001B[0m\u001B[0;34m:\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n",
-      "\u001B[0;32m~/opt/anaconda3/envs/iml.env/lib/python3.7/site-packages/sklearn/preprocessing/_data.py\u001B[0m in \u001B[0;36mpartial_fit\u001B[0;34m(self, X, y, sample_weight)\u001B[0m\n\u001B[1;32m    845\u001B[0m             \u001B[0mdtype\u001B[0m\u001B[0;34m=\u001B[0m\u001B[0mFLOAT_DTYPES\u001B[0m\u001B[0;34m,\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[1;32m    846\u001B[0m             \u001B[0mforce_all_finite\u001B[0m\u001B[0;34m=\u001B[0m\u001B[0;34m\"allow-nan\"\u001B[0m\u001B[0;34m,\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[0;32m--> 847\u001B[0;31m             \u001B[0mreset\u001B[0m\u001B[0;34m=\u001B[0m\u001B[0mfirst_call\u001B[0m\u001B[0;34m,\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[0m\u001B[1;32m    848\u001B[0m         )\n\u001B[1;32m    849\u001B[0m         \u001B[0mn_features\u001B[0m \u001B[0;34m=\u001B[0m \u001B[0mX\u001B[0m\u001B[0;34m.\u001B[0m\u001B[0mshape\u001B[0m\u001B[0;34m[\u001B[0m\u001B[0;36m1\u001B[0m\u001B[0;34m]\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n",
-      "\u001B[0;32m~/opt/anaconda3/envs/iml.env/lib/python3.7/site-packages/sklearn/base.py\u001B[0m in \u001B[0;36m_validate_data\u001B[0;34m(self, X, y, reset, validate_separately, **check_params)\u001B[0m\n\u001B[1;32m    564\u001B[0m             \u001B[0;32mraise\u001B[0m \u001B[0mValueError\u001B[0m\u001B[0;34m(\u001B[0m\u001B[0;34m\"Validation should be done on X, y or both.\"\u001B[0m\u001B[0;34m)\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[1;32m    565\u001B[0m         \u001B[0;32melif\u001B[0m \u001B[0;32mnot\u001B[0m \u001B[0mno_val_X\u001B[0m \u001B[0;32mand\u001B[0m \u001B[0mno_val_y\u001B[0m\u001B[0;34m:\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[0;32m--> 566\u001B[0;31m             \u001B[0mX\u001B[0m \u001B[0;34m=\u001B[0m \u001B[0mcheck_array\u001B[0m\u001B[0;34m(\u001B[0m\u001B[0mX\u001B[0m\u001B[0;34m,\u001B[0m \u001B[0;34m**\u001B[0m\u001B[0mcheck_params\u001B[0m\u001B[0;34m)\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[0m\u001B[1;32m    567\u001B[0m             \u001B[0mout\u001B[0m \u001B[0;34m=\u001B[0m \u001B[0mX\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[1;32m    568\u001B[0m         \u001B[0;32melif\u001B[0m \u001B[0mno_val_X\u001B[0m \u001B[0;32mand\u001B[0m \u001B[0;32mnot\u001B[0m \u001B[0mno_val_y\u001B[0m\u001B[0;34m:\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n",
-      "\u001B[0;32m~/opt/anaconda3/envs/iml.env/lib/python3.7/site-packages/sklearn/utils/validation.py\u001B[0m in \u001B[0;36mcheck_array\u001B[0;34m(array, accept_sparse, accept_large_sparse, dtype, order, copy, force_all_finite, ensure_2d, allow_nd, ensure_min_samples, ensure_min_features, estimator)\u001B[0m\n\u001B[1;32m    744\u001B[0m                     \u001B[0marray\u001B[0m \u001B[0;34m=\u001B[0m \u001B[0marray\u001B[0m\u001B[0;34m.\u001B[0m\u001B[0mastype\u001B[0m\u001B[0;34m(\u001B[0m\u001B[0mdtype\u001B[0m\u001B[0;34m,\u001B[0m \u001B[0mcasting\u001B[0m\u001B[0;34m=\u001B[0m\u001B[0;34m\"unsafe\"\u001B[0m\u001B[0;34m,\u001B[0m \u001B[0mcopy\u001B[0m\u001B[0;34m=\u001B[0m\u001B[0;32mFalse\u001B[0m\u001B[0;34m)\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[1;32m    745\u001B[0m                 \u001B[0;32melse\u001B[0m\u001B[0;34m:\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[0;32m--> 746\u001B[0;31m                     \u001B[0marray\u001B[0m \u001B[0;34m=\u001B[0m \u001B[0mnp\u001B[0m\u001B[0;34m.\u001B[0m\u001B[0masarray\u001B[0m\u001B[0;34m(\u001B[0m\u001B[0marray\u001B[0m\u001B[0;34m,\u001B[0m \u001B[0morder\u001B[0m\u001B[0;34m=\u001B[0m\u001B[0morder\u001B[0m\u001B[0;34m,\u001B[0m \u001B[0mdtype\u001B[0m\u001B[0;34m=\u001B[0m\u001B[0mdtype\u001B[0m\u001B[0;34m)\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[0m\u001B[1;32m    747\u001B[0m             \u001B[0;32mexcept\u001B[0m \u001B[0mComplexWarning\u001B[0m \u001B[0;32mas\u001B[0m \u001B[0mcomplex_warning\u001B[0m\u001B[0;34m:\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[1;32m    748\u001B[0m                 raise ValueError(\n",
-      "\u001B[0;32m~/opt/anaconda3/envs/iml.env/lib/python3.7/site-packages/pandas/core/generic.py\u001B[0m in \u001B[0;36m__array__\u001B[0;34m(self, dtype)\u001B[0m\n\u001B[1;32m   1991\u001B[0m \u001B[0;34m\u001B[0m\u001B[0m\n\u001B[1;32m   1992\u001B[0m     \u001B[0;32mdef\u001B[0m \u001B[0m__array__\u001B[0m\u001B[0;34m(\u001B[0m\u001B[0mself\u001B[0m\u001B[0;34m,\u001B[0m \u001B[0mdtype\u001B[0m\u001B[0;34m:\u001B[0m \u001B[0mNpDtype\u001B[0m \u001B[0;34m|\u001B[0m \u001B[0;32mNone\u001B[0m \u001B[0;34m=\u001B[0m \u001B[0;32mNone\u001B[0m\u001B[0;34m)\u001B[0m \u001B[0;34m->\u001B[0m \u001B[0mnp\u001B[0m\u001B[0;34m.\u001B[0m\u001B[0mndarray\u001B[0m\u001B[0;34m:\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[0;32m-> 1993\u001B[0;31m         \u001B[0;32mreturn\u001B[0m \u001B[0mnp\u001B[0m\u001B[0;34m.\u001B[0m\u001B[0masarray\u001B[0m\u001B[0;34m(\u001B[0m\u001B[0mself\u001B[0m\u001B[0;34m.\u001B[0m\u001B[0m_values\u001B[0m\u001B[0;34m,\u001B[0m \u001B[0mdtype\u001B[0m\u001B[0;34m=\u001B[0m\u001B[0mdtype\u001B[0m\u001B[0;34m)\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[0m\u001B[1;32m   1994\u001B[0m \u001B[0;34m\u001B[0m\u001B[0m\n\u001B[1;32m   1995\u001B[0m     def __array_wrap__(\n",
-      "\u001B[0;31mTypeError\u001B[0m: float() argument must be a string or a number, not 'Timestamp'"
+      "Test set size: 11732\n",
+      "['h_booking_id', 'booking_datetime', 'checkin_date', 'checkout_date', 'hotel_id', 'hotel_live_date', 'hotel_star_rating', 'h_customer_id', 'guest_is_not_the_customer', 'no_of_adults', 'no_of_children', 'no_of_extra_bed', 'no_of_room', 'language', 'original_selling_amount', 'cancellation_policy_code', 'request_nonesmoke', 'request_latecheckin', 'request_highfloor', 'request_largebed', 'request_twinbeds', 'request_airport', 'request_earlycheckin', 'cancellation_datetime', 'hotel_area_code', 'hotel_brand_code', 'hotel_chain_code', 'hotel_city_code', 'order_canceled', 'duration_days', 'booked_days_before', 'cencel_code_day_one', 'cencel_code_return_one', 'cencel_code_day_two', 'cencel_code_return_two', 'parse_code_no_show', 'booking_datetime_dayofyear', 'booking_datetime_year', 'checkin_date_dayofyear', 'checkin_date_year', 'checkout_date_dayofyear', 'checkout_date_year', 'hotel_live_date_dayofyear', 'hotel_live_date_year', 'cancellation_datetime_dayofyear', 'cancellation_datetime_year', 'hotel_country_code_AD', 'hotel_country_code_AE', 'hotel_country_code_AL', 'hotel_country_code_AM', 'hotel_country_code_AR', 'hotel_country_code_AT', 'hotel_country_code_AU', 'hotel_country_code_AW', 'hotel_country_code_AZ', 'hotel_country_code_BA', 'hotel_country_code_BB', 'hotel_country_code_BD', 'hotel_country_code_BE', 'hotel_country_code_BG', 'hotel_country_code_BH', 'hotel_country_code_BJ', 'hotel_country_code_BN', 'hotel_country_code_BO', 'hotel_country_code_BR', 'hotel_country_code_BW', 'hotel_country_code_BY', 'hotel_country_code_CA', 'hotel_country_code_CH', 'hotel_country_code_CI', 'hotel_country_code_CK', 'hotel_country_code_CL', 'hotel_country_code_CM', 'hotel_country_code_CN', 'hotel_country_code_CO', 'hotel_country_code_CR', 'hotel_country_code_CY', 'hotel_country_code_CZ', 'hotel_country_code_DE', 'hotel_country_code_DK', 'hotel_country_code_DO', 'hotel_country_code_DZ', 'hotel_country_code_EE', 'hotel_country_code_EG', 'hotel_country_code_ES', 'hotel_country_code_ET', 'hotel_country_code_FI', 'hotel_country_code_FJ', 'hotel_country_code_FR', 'hotel_country_code_GB', 'hotel_country_code_GE', 'hotel_country_code_GH', 'hotel_country_code_GR', 'hotel_country_code_GU', 'hotel_country_code_HK', 'hotel_country_code_HN', 'hotel_country_code_HR', 'hotel_country_code_HT', 'hotel_country_code_HU', 'hotel_country_code_ID', 'hotel_country_code_IE', 'hotel_country_code_IL', 'hotel_country_code_IN', 'hotel_country_code_IS', 'hotel_country_code_IT', 'hotel_country_code_JM', 'hotel_country_code_JO', 'hotel_country_code_JP', 'hotel_country_code_KE', 'hotel_country_code_KG', 'hotel_country_code_KH', 'hotel_country_code_KR', 'hotel_country_code_KW', 'hotel_country_code_KZ', 'hotel_country_code_LA', 'hotel_country_code_LK', 'hotel_country_code_LT', 'hotel_country_code_LU', 'hotel_country_code_LV', 'hotel_country_code_MA', 'hotel_country_code_ME', 'hotel_country_code_MK', 'hotel_country_code_MM', 'hotel_country_code_MN', 'hotel_country_code_MO', 'hotel_country_code_MP', 'hotel_country_code_MT', 'hotel_country_code_MU', 'hotel_country_code_MV', 'hotel_country_code_MX', 'hotel_country_code_MY', 'hotel_country_code_MZ', 'hotel_country_code_NG', 'hotel_country_code_NL', 'hotel_country_code_NO', 'hotel_country_code_NP', 'hotel_country_code_NZ', 'hotel_country_code_OM', 'hotel_country_code_PA', 'hotel_country_code_PE', 'hotel_country_code_PF', 'hotel_country_code_PG', 'hotel_country_code_PH', 'hotel_country_code_PK', 'hotel_country_code_PL', 'hotel_country_code_PR', 'hotel_country_code_PT', 'hotel_country_code_QA', 'hotel_country_code_RE', 'hotel_country_code_RO', 'hotel_country_code_RS', 'hotel_country_code_RU', 'hotel_country_code_SA', 'hotel_country_code_SC', 'hotel_country_code_SE', 'hotel_country_code_SG', 'hotel_country_code_SI', 'hotel_country_code_SK', 'hotel_country_code_TG', 'hotel_country_code_TH', 'hotel_country_code_TJ', 'hotel_country_code_TL', 'hotel_country_code_TN', 'hotel_country_code_TR', 'hotel_country_code_TW', 'hotel_country_code_TZ', 'hotel_country_code_UA', 'hotel_country_code_UG', 'hotel_country_code_US', 'hotel_country_code_UY', 'hotel_country_code_UZ', 'hotel_country_code_VN', 'hotel_country_code_VU', 'hotel_country_code_ZA', 'hotel_country_code_ZW', 'accommadation_type_name_Apartment', 'accommadation_type_name_Boat / Cruise', 'accommadation_type_name_Bungalow', 'accommadation_type_name_Capsule Hotel', 'accommadation_type_name_Chalet', 'accommadation_type_name_Guest House / Bed & Breakfast', 'accommadation_type_name_Holiday Park / Caravan Park', 'accommadation_type_name_Home', 'accommadation_type_name_Homestay', 'accommadation_type_name_Hostel', 'accommadation_type_name_Hotel', 'accommadation_type_name_Inn', 'accommadation_type_name_Lodge', 'accommadation_type_name_Love Hotel', 'accommadation_type_name_Motel', 'accommadation_type_name_Private Villa', 'accommadation_type_name_Resort', 'accommadation_type_name_Resort Villa', 'accommadation_type_name_Ryokan', 'accommadation_type_name_Serviced Apartment', 'accommadation_type_name_Tent', 'accommadation_type_name_UNKNOWN', 'charge_option_Pay Later', 'charge_option_Pay Now', 'charge_option_Pay at Check-in', 'customer_nationality_Afghanistan', 'customer_nationality_Albania', 'customer_nationality_Algeria', 'customer_nationality_Angola', 'customer_nationality_Argentina', 'customer_nationality_Australia', 'customer_nationality_Austria', 'customer_nationality_Azerbaijan', 'customer_nationality_Bahamas', 'customer_nationality_Bahrain', 'customer_nationality_Bangladesh', 'customer_nationality_Belarus', 'customer_nationality_Belgium', 'customer_nationality_Benin', 'customer_nationality_Bermuda', 'customer_nationality_Bolivia', 'customer_nationality_Botswana', 'customer_nationality_Brazil', 'customer_nationality_Brunei Darussalam', 'customer_nationality_Bulgaria', 'customer_nationality_Burkina Faso', 'customer_nationality_Cambodia', 'customer_nationality_Cameroon', 'customer_nationality_Canada', 'customer_nationality_Chile', 'customer_nationality_China', 'customer_nationality_Colombia', 'customer_nationality_Costa Rica', \"customer_nationality_Cote D'ivoire\", 'customer_nationality_Croatia', 'customer_nationality_Curacao', 'customer_nationality_Cyphrus', 'customer_nationality_Czech Republic', 'customer_nationality_Democratic Republic of the\\xa0Congo', 'customer_nationality_Denmark', 'customer_nationality_Egypt', 'customer_nationality_Estonia', 'customer_nationality_Faroe Islands', 'customer_nationality_Fiji', 'customer_nationality_Finland', 'customer_nationality_France', 'customer_nationality_French Polynesia', 'customer_nationality_Gambia', 'customer_nationality_Georgia', 'customer_nationality_Germany', 'customer_nationality_Ghana', 'customer_nationality_Greece', 'customer_nationality_Guam', 'customer_nationality_Guatemala', 'customer_nationality_Guernsey', 'customer_nationality_Guinea', 'customer_nationality_Hong Kong', 'customer_nationality_Hungary', 'customer_nationality_Iceland', 'customer_nationality_India', 'customer_nationality_Indonesia', 'customer_nationality_Iraq', 'customer_nationality_Ireland', 'customer_nationality_Isle Of Man', 'customer_nationality_Israel', 'customer_nationality_Italy', 'customer_nationality_Jamaica', 'customer_nationality_Japan', 'customer_nationality_Jersey', 'customer_nationality_Jordan', 'customer_nationality_Kazakhstan', 'customer_nationality_Kenya', 'customer_nationality_Kuwait', 'customer_nationality_Kyrgyzstan', 'customer_nationality_Laos', 'customer_nationality_Latvia', 'customer_nationality_Lebanon', 'customer_nationality_Liechtenstein', 'customer_nationality_Lithuania', 'customer_nationality_Luxembourg', 'customer_nationality_Macau', 'customer_nationality_Madagascar', 'customer_nationality_Malaysia', 'customer_nationality_Maldives', 'customer_nationality_Mali', 'customer_nationality_Malta', 'customer_nationality_Mauritius', 'customer_nationality_Mexico', 'customer_nationality_Monaco', 'customer_nationality_Mongolia', 'customer_nationality_Montenegrin', 'customer_nationality_Morocco', 'customer_nationality_Myanmar', 'customer_nationality_Namibia', 'customer_nationality_Nepal', 'customer_nationality_Netherlands', 'customer_nationality_New Zealand', 'customer_nationality_Nigeria', 'customer_nationality_Northern Marianas', 'customer_nationality_Norway', 'customer_nationality_Oman', 'customer_nationality_Pakistan', 'customer_nationality_Palestinian Territory', 'customer_nationality_Papua New Guinea', 'customer_nationality_Peru', 'customer_nationality_Philippines', 'customer_nationality_Poland', 'customer_nationality_Portugal', 'customer_nationality_Puerto Rico', 'customer_nationality_Qatar', 'customer_nationality_Reunion Island', 'customer_nationality_Romania', 'customer_nationality_Russia', 'customer_nationality_Sao Tome and Principe', 'customer_nationality_Saudi Arabia', 'customer_nationality_Singapore', 'customer_nationality_Slovakia', 'customer_nationality_Slovenia', 'customer_nationality_Somalia', 'customer_nationality_South Africa', 'customer_nationality_South Korea', 'customer_nationality_Spain', 'customer_nationality_Sri Lanka', 'customer_nationality_Sweden', 'customer_nationality_Switzerland', 'customer_nationality_Taiwan', 'customer_nationality_Thailand', 'customer_nationality_Timor-Leste', 'customer_nationality_Togo', 'customer_nationality_Trinidad and Tobago', 'customer_nationality_Tunisia', 'customer_nationality_Turkey', 'customer_nationality_UNKNOWN', 'customer_nationality_Uganda', 'customer_nationality_Ukraine', 'customer_nationality_United Arab Emirates', 'customer_nationality_United Kingdom', 'customer_nationality_United States of America', 'customer_nationality_Uruguay', 'customer_nationality_Uzbekistan', 'customer_nationality_Venezuela', 'customer_nationality_Vietnam', 'customer_nationality_Yemen', 'customer_nationality_Zambia', 'customer_nationality_Zimbabwe', 'guest_nationality_country_name_Afghanistan', 'guest_nationality_country_name_Albania', 'guest_nationality_country_name_Algeria', 'guest_nationality_country_name_Andorra', 'guest_nationality_country_name_Angola', 'guest_nationality_country_name_Argentina', 'guest_nationality_country_name_Aruba', 'guest_nationality_country_name_Australia', 'guest_nationality_country_name_Austria', 'guest_nationality_country_name_Azerbaijan', 'guest_nationality_country_name_Bahamas', 'guest_nationality_country_name_Bahrain', 'guest_nationality_country_name_Bangladesh', 'guest_nationality_country_name_Barbados', 'guest_nationality_country_name_Belarus', 'guest_nationality_country_name_Belgium', 'guest_nationality_country_name_Benin', 'guest_nationality_country_name_Bhutan', 'guest_nationality_country_name_Botswana', 'guest_nationality_country_name_Brazil', 'guest_nationality_country_name_British Indian Ocean Territory', 'guest_nationality_country_name_Brunei Darussalam', 'guest_nationality_country_name_Bulgaria', 'guest_nationality_country_name_Burkina Faso', 'guest_nationality_country_name_Cambodia', 'guest_nationality_country_name_Cameroon', 'guest_nationality_country_name_Canada', 'guest_nationality_country_name_Central African Republic', 'guest_nationality_country_name_Chile', 'guest_nationality_country_name_China', 'guest_nationality_country_name_Colombia', 'guest_nationality_country_name_Costa Rica', \"guest_nationality_country_name_Cote D'ivoire\", 'guest_nationality_country_name_Croatia', 'guest_nationality_country_name_Curacao', 'guest_nationality_country_name_Cyprus', 'guest_nationality_country_name_Czech Republic', 'guest_nationality_country_name_Democratic Republic of the\\xa0Congo', 'guest_nationality_country_name_Denmark', 'guest_nationality_country_name_Egypt', 'guest_nationality_country_name_Estonia', 'guest_nationality_country_name_Eswatini', 'guest_nationality_country_name_Faroe Islands', 'guest_nationality_country_name_Fiji', 'guest_nationality_country_name_Finland', 'guest_nationality_country_name_France', 'guest_nationality_country_name_French Guiana', 'guest_nationality_country_name_French Polynesia', 'guest_nationality_country_name_Gabon', 'guest_nationality_country_name_Gambia', 'guest_nationality_country_name_Georgia', 'guest_nationality_country_name_Germany', 'guest_nationality_country_name_Ghana', 'guest_nationality_country_name_Greece', 'guest_nationality_country_name_Guam', 'guest_nationality_country_name_Guatemala', 'guest_nationality_country_name_Guinea', 'guest_nationality_country_name_Hong Kong', 'guest_nationality_country_name_Hungary', 'guest_nationality_country_name_Iceland', 'guest_nationality_country_name_India', 'guest_nationality_country_name_Indonesia', 'guest_nationality_country_name_Iraq', 'guest_nationality_country_name_Ireland', 'guest_nationality_country_name_Isle Of Man', 'guest_nationality_country_name_Israel', 'guest_nationality_country_name_Italy', 'guest_nationality_country_name_Japan', 'guest_nationality_country_name_Jersey', 'guest_nationality_country_name_Jordan', 'guest_nationality_country_name_Kazakhstan', 'guest_nationality_country_name_Kenya', 'guest_nationality_country_name_Kuwait', 'guest_nationality_country_name_Kyrgyzstan', 'guest_nationality_country_name_Laos', 'guest_nationality_country_name_Latvia', 'guest_nationality_country_name_Lebanon', 'guest_nationality_country_name_Lithuania', 'guest_nationality_country_name_Luxembourg', 'guest_nationality_country_name_Macau', 'guest_nationality_country_name_Madagascar', 'guest_nationality_country_name_Malaysia', 'guest_nationality_country_name_Maldives', 'guest_nationality_country_name_Mali', 'guest_nationality_country_name_Malta', 'guest_nationality_country_name_Mauritius', 'guest_nationality_country_name_Mexico', 'guest_nationality_country_name_Monaco', 'guest_nationality_country_name_Mongolia', 'guest_nationality_country_name_Montenegro', 'guest_nationality_country_name_Morocco', 'guest_nationality_country_name_Mozambique', 'guest_nationality_country_name_Myanmar', 'guest_nationality_country_name_Namibia', 'guest_nationality_country_name_Nepal', 'guest_nationality_country_name_Netherlands', 'guest_nationality_country_name_New Caledonia', 'guest_nationality_country_name_New Zealand', 'guest_nationality_country_name_Nigeria', 'guest_nationality_country_name_Northern Mariana Islands', 'guest_nationality_country_name_Norway', 'guest_nationality_country_name_Oman', 'guest_nationality_country_name_Pakistan', 'guest_nationality_country_name_Palestinian Territory', 'guest_nationality_country_name_Papua New Guinea', 'guest_nationality_country_name_Peru', 'guest_nationality_country_name_Philippines', 'guest_nationality_country_name_Poland', 'guest_nationality_country_name_Portugal', 'guest_nationality_country_name_Puerto Rico', 'guest_nationality_country_name_Qatar', 'guest_nationality_country_name_Reunion Island', 'guest_nationality_country_name_Romania', 'guest_nationality_country_name_Russia', 'guest_nationality_country_name_Saudi Arabia', 'guest_nationality_country_name_Senegal', 'guest_nationality_country_name_Singapore', 'guest_nationality_country_name_Sint Maarten (Netherlands)', 'guest_nationality_country_name_Slovakia', 'guest_nationality_country_name_Slovenia', 'guest_nationality_country_name_Somalia', 'guest_nationality_country_name_South Africa', 'guest_nationality_country_name_South Korea', 'guest_nationality_country_name_South Sudan', 'guest_nationality_country_name_Spain', 'guest_nationality_country_name_Sri Lanka', 'guest_nationality_country_name_Sweden', 'guest_nationality_country_name_Switzerland', 'guest_nationality_country_name_Taiwan', 'guest_nationality_country_name_Thailand', 'guest_nationality_country_name_Togo', 'guest_nationality_country_name_Trinidad & Tobago', 'guest_nationality_country_name_Tunisia', 'guest_nationality_country_name_Turkey', 'guest_nationality_country_name_UNKNOWN', 'guest_nationality_country_name_Uganda', 'guest_nationality_country_name_Ukraine', 'guest_nationality_country_name_United Arab Emirates', 'guest_nationality_country_name_United Kingdom', 'guest_nationality_country_name_United States', 'guest_nationality_country_name_Uruguay', 'guest_nationality_country_name_Uzbekistan', 'guest_nationality_country_name_Venezuela', 'guest_nationality_country_name_Vietnam', 'guest_nationality_country_name_Yemen', 'guest_nationality_country_name_Zambia', 'guest_nationality_country_name_Zimbabwe', 'origin_country_code_A1', 'origin_country_code_AD', 'origin_country_code_AE', 'origin_country_code_AF', 'origin_country_code_AL', 'origin_country_code_AM', 'origin_country_code_AO', 'origin_country_code_AR', 'origin_country_code_AT', 'origin_country_code_AU', 'origin_country_code_AZ', 'origin_country_code_BA', 'origin_country_code_BD', 'origin_country_code_BE', 'origin_country_code_BF', 'origin_country_code_BG', 'origin_country_code_BH', 'origin_country_code_BJ', 'origin_country_code_BN', 'origin_country_code_BO', 'origin_country_code_BR', 'origin_country_code_BS', 'origin_country_code_BT', 'origin_country_code_BW', 'origin_country_code_BY', 'origin_country_code_CA', 'origin_country_code_CD', 'origin_country_code_CG', 'origin_country_code_CH', 'origin_country_code_CI', 'origin_country_code_CL', 'origin_country_code_CM', 'origin_country_code_CN', 'origin_country_code_CO', 'origin_country_code_CR', 'origin_country_code_CU', 'origin_country_code_CW', 'origin_country_code_CY', 'origin_country_code_CZ', 'origin_country_code_DE', 'origin_country_code_DK', 'origin_country_code_DO', 'origin_country_code_DZ', 'origin_country_code_EE', 'origin_country_code_EG', 'origin_country_code_ES', 'origin_country_code_FI', 'origin_country_code_FJ', 'origin_country_code_FO', 'origin_country_code_FR', 'origin_country_code_GB', 'origin_country_code_GE', 'origin_country_code_GH', 'origin_country_code_GM', 'origin_country_code_GN', 'origin_country_code_GR', 'origin_country_code_GU', 'origin_country_code_HK', 'origin_country_code_HR', 'origin_country_code_HU', 'origin_country_code_ID', 'origin_country_code_IE', 'origin_country_code_IL', 'origin_country_code_IM', 'origin_country_code_IN', 'origin_country_code_IQ', 'origin_country_code_IR', 'origin_country_code_IS', 'origin_country_code_IT', 'origin_country_code_JE', 'origin_country_code_JM', 'origin_country_code_JO', 'origin_country_code_JP', 'origin_country_code_KE', 'origin_country_code_KG', 'origin_country_code_KH', 'origin_country_code_KR', 'origin_country_code_KW', 'origin_country_code_KZ', 'origin_country_code_LA', 'origin_country_code_LB', 'origin_country_code_LK', 'origin_country_code_LT', 'origin_country_code_LU', 'origin_country_code_LV', 'origin_country_code_LY', 'origin_country_code_MA', 'origin_country_code_MG', 'origin_country_code_MM', 'origin_country_code_MN', 'origin_country_code_MO', 'origin_country_code_MP', 'origin_country_code_MT', 'origin_country_code_MU', 'origin_country_code_MV', 'origin_country_code_MX', 'origin_country_code_MY', 'origin_country_code_MZ', 'origin_country_code_NC', 'origin_country_code_NG', 'origin_country_code_NL', 'origin_country_code_NO', 'origin_country_code_NP', 'origin_country_code_NZ', 'origin_country_code_OM', 'origin_country_code_PA', 'origin_country_code_PE', 'origin_country_code_PF', 'origin_country_code_PG', 'origin_country_code_PH', 'origin_country_code_PK', 'origin_country_code_PL', 'origin_country_code_PR', 'origin_country_code_PS', 'origin_country_code_PT', 'origin_country_code_PY', 'origin_country_code_QA', 'origin_country_code_RE', 'origin_country_code_RO', 'origin_country_code_RS', 'origin_country_code_RU', 'origin_country_code_SA', 'origin_country_code_SE', 'origin_country_code_SG', 'origin_country_code_SI', 'origin_country_code_SK', 'origin_country_code_SS', 'origin_country_code_SV', 'origin_country_code_TG', 'origin_country_code_TH', 'origin_country_code_TL', 'origin_country_code_TN', 'origin_country_code_TO', 'origin_country_code_TR', 'origin_country_code_TW', 'origin_country_code_TZ', 'origin_country_code_UA', 'origin_country_code_UG', 'origin_country_code_US', 'origin_country_code_UY', 'origin_country_code_UZ', 'origin_country_code_VN', 'origin_country_code_ZA', 'origin_country_code_ZM', 'origin_country_code_ZW', 'original_payment_method_7Eleven', 'original_payment_method_ATM Bersama', 'original_payment_method_Affin Online', 'original_payment_method_Alfamart', 'original_payment_method_Alipay', 'original_payment_method_AmOnline', 'original_payment_method_American Express', 'original_payment_method_Apple Pay', 'original_payment_method_BAY', 'original_payment_method_BBL', 'original_payment_method_Bank Islam', 'original_payment_method_Big C', 'original_payment_method_CIMB Clicks Malaysia', 'original_payment_method_Discover', 'original_payment_method_Family Mart', 'original_payment_method_Hong Leong Connect', 'original_payment_method_IDEAL', 'original_payment_method_Indomaret', 'original_payment_method_JCB', 'original_payment_method_K PLUS', 'original_payment_method_KTB', 'original_payment_method_MasterCard', 'original_payment_method_MayBank2U', 'original_payment_method_PBe', 'original_payment_method_PayPal', 'original_payment_method_Prima', 'original_payment_method_RHB Now', 'original_payment_method_SCB', 'original_payment_method_Tesco Lotus', 'original_payment_method_Thanachart', 'original_payment_method_UNKNOWN', 'original_payment_method_UnionPay - Creditcard', 'original_payment_method_UnionPay - Debit Card', 'original_payment_method_Visa', 'original_payment_method_WeChat', 'original_payment_method_mPay', 'original_payment_type_Credit Card', 'original_payment_type_Gift Card', 'original_payment_type_Invoice', 'original_payment_currency_AED', 'original_payment_currency_ARS', 'original_payment_currency_AUD', 'original_payment_currency_BDT', 'original_payment_currency_BHD', 'original_payment_currency_BRL', 'original_payment_currency_CAD', 'original_payment_currency_CHF', 'original_payment_currency_CNY', 'original_payment_currency_CZK', 'original_payment_currency_DKK', 'original_payment_currency_EGP', 'original_payment_currency_EUR', 'original_payment_currency_FJD', 'original_payment_currency_GBP', 'original_payment_currency_HKD', 'original_payment_currency_HUF', 'original_payment_currency_IDR', 'original_payment_currency_ILS', 'original_payment_currency_INR', 'original_payment_currency_JOD', 'original_payment_currency_JPY', 'original_payment_currency_KHR', 'original_payment_currency_KRW', 'original_payment_currency_KWD', 'original_payment_currency_KZT', 'original_payment_currency_LAK', 'original_payment_currency_LKR', 'original_payment_currency_MXN', 'original_payment_currency_MYR', 'original_payment_currency_NGN', 'original_payment_currency_NOK', 'original_payment_currency_NZD', 'original_payment_currency_OMR', 'original_payment_currency_PHP', 'original_payment_currency_PKR', 'original_payment_currency_PLN', 'original_payment_currency_QAR', 'original_payment_currency_RON', 'original_payment_currency_RUB', 'original_payment_currency_SAR', 'original_payment_currency_SEK', 'original_payment_currency_SGD', 'original_payment_currency_THB', 'original_payment_currency_TRY', 'original_payment_currency_TWD', 'original_payment_currency_UAH', 'original_payment_currency_USD', 'original_payment_currency_VND', 'original_payment_currency_XPF', 'original_payment_currency_ZAR', 'is_first_booking_False', 'is_first_booking_True', 'is_user_logged_in_False', 'is_user_logged_in_True']\n"
      ]
     }
    ],
@@ -557,7 +713,8 @@
     "from Classification import Classification\n",
     "\n",
     "train_df, test_df, validation_df = split_data(df)\n",
-    "Classification().run_all(train_df, train_df['order_canceled'], test_df, test_df['order_canceled'])"
+    "# Classification().run_all(train_df, train_df['order_canceled'], test_df, test_df['order_canceled'])\n",
+    "print(df.columns.tolist())\n"
    ],
    "metadata": {
     "collapsed": false,
